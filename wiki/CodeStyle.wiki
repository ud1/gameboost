#summary Стиль написания кода, именования переменных, классов, констант и т.д.
#labels Featured,Phase-Requirements

= Introduction =

Документ описывает принятый в GameBoost стиль написания кода, именования переменных, классов, констант и т.д. Всем разработчикам настоятельно рекомендуется придерживаться этих соглашений.


= Details =

=Заголовки=

==#define Guard==

Используется директива
{{{
#pragma once
}}}

Также одновременно с pragma once используются охранные директивы препроцессора:
{{{
#ifndef _GB_ПАПКА_ИМЯФАЙЛА_H_
#define _GB_ПАПКА_ИМЯФАЙЛА_H_
#endif // _GB_ПАПКА_ИМЯФАЙЛА_H_
}}}

==Зависимые заголовки==
==Inline функции==
==Порядок параметров функций==
==Имена и порядок включения .h файлов==

=Именование=
	
==Namespace==

Всё, что принадлежит библиотеке GameBoost, следует заключить в:
{{{
namespace gb {
}
}}}

Вложенные подпапки должны отвечать вложенному namespace:
К примеру gb/io/io.h будет находиться в:
{{{
namespace gb { namespace io {
} // namespace gb
} // namespace io
}}}

Использование using namespace и namespace X = Y; в заголовках .H, .INL - ЗАПРЕЩЕНО. Однако разрешается использовать эти директивы в файлах .CPP.

==Статические, глобальные и дружественные функции==
==Локальные переменные==
==Статические и глобальные переменные==

=Классы=
	
==Действия в конструкторах==
==Конструкторы по умолчанию==
==Явные конструкторы==
==Конструкторы копирования==
==Структуры против Классов==
==Наследование==
==Множественное наследование==
==Интерфейсы==
==Перегрузка операторов==
==Права доступа к членам класса==
==Порядок объявления==
==Короткие функции==

=Прочие С++ особенности=
	
==Аргументы по ссылке==
==Перегрузка функций==
==Аргументы по умолчанию==
==Исключения==
==Run-Time Type Information (RTTI)==
==Приведение типов==
==Потоки==
==Preincrement и Predecrement==
==Использование const==
==Целочисленные типы==
==64-bit совместимость==
==Макросы препроцессора==
==0 и NULL==
==sizeof==
==Boost==
==C++0x==

=Именование=
	
==Общие правила именования==
==Имена классов==

Классы именуются коротко и с БольшойБуквы. Префикс C`*` не используется, но автор по своему усмотрению может дописать typedef для синонима класса с префиксом C`*`.

Детали реализации (вспомогательные типы, классы, структуры) либо заносятся в .CPP файл, либо прячутся внутрь вспомогательного пространства имён:
{{{
namespace detail {
    class МойВспомогательныйКласс {
    };
} // namespace detail
}}}

==Имена файлов==

Файлы называются маленькими латинскими буквами с подчёркиваниями.
Файлы кода имеют расширение .CPP, файлы заголовков - расширение .H, файлы с инлайн кодом, которые инклюдятся, но не должны компилироваться системой автосборки - расширение .INL

==Имена типов данных==
==Имена переменных==

Локальные переменные именуются маленькими буквами с подчёркиванием между словами. Желательно использовать имена существительные.

==Имена констант==
==Имена функций==

Функции именуются маленькими буквами с подчёркиванием между словами. Желательно использовать глаголы инфинитивы или императивы (сделать=do_*, открыть=open_*, нарисовать=draw_*).

Проверочные функции, возвращающие bool именуются в вопросительной форме is_* или has_*

==Имена пространств имён==
==Имена перечислений==
==Имена макросов==

Макросы именуются строго большими буквами с подчёркиваниями между словами. Имена макросов имеют префикс GB_*

Если макрос не нужен за пределами своего файла, надо его удалить командой #undef.

==Исключения из правил==

=Комментарии к коду=
	
==Стиль комментариев==
==Заголовки файлов==
==Комментарии к классам==
==Комментарии к функциям==
==Комментарии к переменным==
==Комментарии к коду==
==Пунктуация==
==Правописание==

=Форматирование кода=
	
==Длина строк==
==Не-ASCII символы==
==Пробелы или табуляции?==
==Объявления и тела функций==
==Вызовы функций==
==Условные операторы==
==Циклы и switch()==
==Указатели и ссылки==
==Логические выражения==
==Возвращаемые значения==
==Инициализация переменных и массивов==
==Директивы препроцессора==
==Формат классов==
===Конструкторы===
===Списки инициализации членов класса===
==Форматирование пространств имён==
==Исключения из правил==