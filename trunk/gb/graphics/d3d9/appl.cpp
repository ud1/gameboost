

#include "d3d9pch.h"
//#include "pch.h"

#if ( defined(GB_D3D9) && defined(WIN32) )
 

//#include "Z:\\CODE_EXPERIMENT\\newd9r\\ApplD3D9.h"
//#include "dxut.h"

//#include "appl_d3d9.h"
#include <gb/graphics/d3d9/appl.h>

using namespace gb::system::winappl;


#pragma warning( disable : 4290 )

namespace gb       
{
namespace graphics 
{
namespace d3d9     
{
namespace appl     
{
	
//======================================================================

/*
 
#include <stdio.h>
#include <stdlib.h>
#include <iostream> 
#include <string>
#include <assert.h>
*/

#pragma warning( disable : 4996 ) // disable deprecated warning 
#include <strsafe.h>
#pragma warning( default : 4996 )



#if  1

 #pragma comment( lib, "dxerr.lib" )
 #pragma comment( lib, "dxguid.lib" )

 #if defined(DEBUG) || defined(_DEBUG)
    #pragma comment( lib, "d3dx9d.lib" )
 #else
    #pragma comment( lib, "d3dx9.lib" )
 #endif

 #pragma comment( lib, "d3d9.lib" )
 #pragma comment( lib, "winmm.lib" )
 #pragma comment( lib, "comctl32.lib" )

#endif
 
#define PRINT_D9R_FUNC printf("%s\n", __FUNCTION__);

//* класс окна приложения
static const WCHAR*  CWSTR_WINDOW_CLASSNAME  =  L"D3D Application";

// позволить "быть" пример-сценке.
#define ENABLE_SAMPLE_SCENE

#ifdef ENABLE_SAMPLE_SCENE

ID3DXMesh* g_pTempMesh = NULL ; ///< времянка
IDirect3DTexture9* g_pTempTexture = NULL; ///< времянка

#endif


HRESULT DrawSampleScene(IDirect3DDevice9* pdevice);
void ReleaseSampleDataScene();


/*********************
HRESULT __testFs()
{

bool m_bFullScreen = true;

if (m_bFullScreen)
{
DEVMODE dmScreenSettings;            
memset(&dmScreenSettings,0,sizeof(dmScreenSettings));
dmScreenSettings.dmSize = sizeof(dmScreenSettings);   
dmScreenSettings.dmPelsWidth = 1024;      
dmScreenSettings.dmPelsHeight = 768;          dmScreenSettings.dmBitsPerPel = 32;      
dmScreenSettings.dmFields=DM_BITSPERPEL|DM_PELSWIDTH|DM_PELSHEIGHT;

if (ChangeDisplaySettings(&dmScreenSettings, CDS_FULLSCREEN) != DISP_CHANGE_SUCCESSFUL)
{      
// setting display mode failed, switch to windowed
MessageBox(NULL, "Display mode failed", NULL, MB_OK);
m_bFullScreen=false;   
}
}

if (m_bFullScreen)               
{
dwExStyle=WS_EX_APPWINDOW;      
dwStyle=WS_POPUP;                  
ShowCursor(FALSE);                  
}
else
{
dwExStyle=WS_EX_APPWINDOW | WS_EX_WINDOWEDGE;   
dwStyle=WS_OVERLAPPEDWINDOW;            
}


};
******************************************/



/*****************************************************

enum DXUT_MATCH_TYPE
{
DXUTMT_IGNORE_INPUT = 0,  // Use the closest valid value to a default 
DXUTMT_PRESERVE_INPUT,    // Use input without change, but may cause no valid device to be found
DXUTMT_CLOSEST_TO_INPUT   // Use the closest valid value to the input 
};

struct DXUTMatchOptions
{
DXUT_MATCH_TYPE eAdapterOrdinal;
DXUT_MATCH_TYPE eDeviceType;
DXUT_MATCH_TYPE eWindowed;
DXUT_MATCH_TYPE eAdapterFormat;
DXUT_MATCH_TYPE eVertexProcessing;
DXUT_MATCH_TYPE eResolution;
DXUT_MATCH_TYPE eBackBufferFormat;
DXUT_MATCH_TYPE eBackBufferCount;
DXUT_MATCH_TYPE eMultiSample;
DXUT_MATCH_TYPE eSwapEffect;
DXUT_MATCH_TYPE eDepthFormat;
DXUT_MATCH_TYPE eStencilFormat;
DXUT_MATCH_TYPE ePresentFlags;
DXUT_MATCH_TYPE eRefreshRate;
DXUT_MATCH_TYPE ePresentInterval;
};

struct DXUTDeviceSettings
{
UINT AdapterOrdinal;
D3DDEVTYPE DeviceType;
D3DFORMAT AdapterFormat;
DWORD BehaviorFlags;
D3DPRESENT_PARAMETERS pp;
};

*****************************************************************/


#ifdef ENABLE_SAMPLE_SCENE

//====================================================================

static HRESULT __CPPI_CreateInternalTexture(IDirect3DTexture9 ** ppOut,  IDirect3DDevice9* pdevice)
{
	HRESULT hr =0;

	// static const int DATALEN = 5511;
	static unsigned char data[] = {
		0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x60, 
		0x00, 0x60, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x0A, 0x07, 0x07, 0x09, 0x07, 0x06, 0x0A, 
		0x09, 0x08, 0x09, 0x0B, 0x0B, 0x0A, 0x0C, 0x0F, 0x19, 0x10, 0x0F, 0x0E, 0x0E, 0x0F, 0x1E, 0x16, 
		0x17, 0x12, 0x19, 0x24, 0x20, 0x26, 0x25, 0x23, 0x20, 0x23, 0x22, 0x28, 0x2D, 0x39, 0x30, 0x28, 
		0x2A, 0x36, 0x2B, 0x22, 0x23, 0x32, 0x44, 0x32, 0x36, 0x3B, 0x3D, 0x40, 0x40, 0x40, 0x26, 0x30, 
		0x46, 0x4B, 0x45, 0x3E, 0x4A, 0x39, 0x3F, 0x40, 0x3D, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x0B, 0x0B, 
		0x0B, 0x0F, 0x0D, 0x0F, 0x1D, 0x10, 0x10, 0x1D, 0x3D, 0x29, 0x23, 0x29, 0x3D, 0x3D, 0x3D, 0x3D, 
		0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
		0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 
		0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0xFF, 0xC0, 
		0x00, 0x11, 0x08, 0x00, 0x80, 0x00, 0x80, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 
		0x01, 0xFF, 0xC4, 0x00, 0x1B, 0x00, 0x00, 0x02, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x05, 0x02, 0x03, 0x06, 0x07, 0x01, 0x00, 0xFF, 0xC4, 
		0x00, 0x3B, 0x10, 0x00, 0x02, 0x01, 0x02, 0x04, 0x03, 0x07, 0x01, 0x05, 0x07, 0x04, 0x03, 0x01, 
		0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x11, 0x00, 0x05, 0x12, 0x21, 0x06, 0x31, 0x41, 0x13, 
		0x22, 0x51, 0x71, 0x81, 0x91, 0xA1, 0x61, 0x14, 0x32, 0xB1, 0xC1, 0xD1, 0x07, 0x23, 0x42, 0xA2, 
		0xC2, 0xE1, 0xF0, 0x15, 0x52, 0x72, 0xB2, 0x43, 0x92, 0xF1, 0x82, 0xFF, 0xC4, 0x00, 0x18, 0x01, 
		0x00, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x01, 0x02, 0x03, 0x04, 0xFF, 0xC4, 0x00, 0x1F, 0x11, 0x00, 0x03, 0x01, 0x00, 0x02, 0x03, 
		0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x11, 0x12, 0x31, 
		0x21, 0x22, 0x32, 0x41, 0x03, 0x42, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 
		0x11, 0x00, 0x3F, 0x00, 0xA0, 0xD5, 0x54, 0xD6, 0x55, 0x25, 0x0D, 0x32, 0xC3, 0x1B, 0xB3, 0xAB, 
		0xDE, 0x65, 0x31, 0xB2, 0xB0, 0x6E, 0xBE, 0x5E, 0x3E, 0x18, 0x96, 0x6D, 0x39, 0xA6, 0x9E, 0x38, 
		0x44, 0x52, 0x2D, 0x45, 0x3C, 0xDA, 0xE4, 0x8A, 0x44, 0x20, 0xC7, 0x6B, 0x1B, 0x5F, 0x91, 0xEB, 
		0x63, 0xD4, 0x60, 0x7A, 0xBC, 0xC4, 0x18, 0x48, 0x89, 0xE7, 0x06, 0x47, 0x52, 0x64, 0x78, 0xC0, 
		0x17, 0x06, 0xFB, 0x12, 0x76, 0x3B, 0x9E, 0x5E, 0x36, 0xE4, 0x70, 0x74, 0x21, 0xA2, 0x35, 0x0C, 
		0x6A, 0x44, 0xF1, 0xD4, 0x85, 0x25, 0xDD, 0x02, 0xD8, 0x8B, 0x8B, 0x78, 0x1D, 0xBC, 0x3C, 0x06, 
		0x39, 0xBA, 0x3A, 0xBB, 0x31, 0xFC, 0x71, 0x42, 0x23, 0xAD, 0x8E, 0x78, 0x75, 0x15, 0x96, 0xFB, 
		0x93, 0x70, 0x7C, 0x2D, 0xB7, 0x5E, 0x7E, 0xB8, 0x67, 0xC0, 0x94, 0x4B, 0x4B, 0x43, 0x55, 0x5F, 
		0x2A, 0x8B, 0x81, 0xA5, 0x4F, 0x9F, 0xF6, 0x07, 0xDF, 0x06, 0xE6, 0xD4, 0x4B, 0x59, 0x92, 0x22, 
		0xB8, 0xEF, 0x53, 0x4A, 0x11, 0x8F, 0x33, 0x61, 0x6B, 0x7F, 0x29, 0x51, 0xE8, 0x71, 0xF5, 0x6D, 
		0xB2, 0x5E, 0x0D, 0x8A, 0x18, 0xCF, 0x7A, 0x40, 0x5B, 0x6E, 0xB7, 0xFF, 0x00, 0x01, 0x1E, 0x78, 
		0x5C, 0xB6, 0x78, 0x89, 0xCE, 0x56, 0x91, 0x5F, 0xDA, 0x08, 0x85, 0x4C, 0x66, 0x2A, 0x56, 0x64, 
		0x24, 0x77, 0xA1, 0x52, 0x4F, 0xC6, 0x1D, 0x65, 0xFC, 0x41, 0xF6, 0xF0, 0xCD, 0x2F, 0x62, 0x62, 
		0xEC, 0x83, 0xB3, 0x45, 0x12, 0xA7, 0x66, 0x49, 0x1F, 0x4B, 0x93, 0xBD, 0xAD, 0x8E, 0x3C, 0x4B, 
		0x19, 0x6F, 0xD6, 0xF8, 0xE8, 0xD9, 0x4D, 0x1F, 0x61, 0x92, 0x52, 0x52, 0xB6, 0xD2, 0x56, 0x38, 
		0x79, 0x0F, 0x50, 0x83, 0x99, 0xFF, 0x00, 0xB7, 0xB6, 0x1D, 0xC2, 0x48, 0x98, 0xA6, 0xD8, 0xEF, 
		0x2F, 0xCC, 0xA6, 0xA9, 0xCC, 0x64, 0x93, 0x47, 0x67, 0x0C, 0x70, 0x17, 0x85, 0x59, 0x43, 0x5C, 
		0x16, 0x00, 0x92, 0x0E, 0xC6, 0xE0, 0x9C, 0x5B, 0x58, 0x27, 0xA5, 0x91, 0x52, 0x83, 0x2F, 0x59, 
		0x21, 0xB1, 0x66, 0x85, 0xE3, 0x66, 0x58, 0x9A, 0xFB, 0x85, 0x23, 0x9A, 0xED, 0x71, 0x7E, 0x57, 
		0x23, 0x03, 0xD2, 0xD4, 0x2F, 0xFA, 0x8C, 0xF2, 0xB9, 0x29, 0x1A, 0xA2, 0x41, 0x7B, 0xDF, 0x49, 
		0x66, 0x06, 0xC3, 0xC8, 0x03, 0x8A, 0x38, 0x83, 0x33, 0xAA, 0xCB, 0x40, 0xAB, 0xA4, 0xAA, 0x92, 
		0x11, 0x22, 0xA9, 0xD2, 0x1B, 0xBA, 0xDE, 0x9E, 0x5F, 0x8E, 0x33, 0xFD, 0xC3, 0x4F, 0xCD, 0x2F, 
		0x8A, 0x96, 0xAB, 0x32, 0x60, 0x2B, 0x69, 0xC5, 0x2D, 0x32, 0x58, 0xF6, 0x51, 0xAB, 0x2F, 0x6A, 
		0x77, 0xB6, 0xE7, 0x17, 0x53, 0xD6, 0x3C, 0x39, 0xAC, 0xF1, 0x47, 0x4F, 0x7A, 0x51, 0x12, 0xC8, 
		0xE2, 0x35, 0xDE, 0x30, 0x07, 0x3B, 0x75, 0x1B, 0xEE, 0x3C, 0x37, 0xE9, 0x7C, 0x0D, 0x93, 0xE6, 
		0x59, 0x85, 0x4D, 0x2C, 0x95, 0x15, 0xF3, 0x19, 0x23, 0x31, 0xAB, 0x0D, 0x47, 0x56, 0x93, 0x7B, 
		0x8B, 0x78, 0x1D, 0x8F, 0xB0, 0xC5, 0x92, 0x68, 0x15, 0xF2, 0xB2, 0x12, 0x63, 0x9E, 0x1E, 0xE9, 
		0xE5, 0x7D, 0x27, 0x7F, 0x8B, 0x9F, 0x43, 0x83, 0xF4, 0x3B, 0x45, 0x79, 0xB7, 0x12, 0x4F, 0x94, 
		0x3C, 0x86, 0x3E, 0xC9, 0xD1, 0xAC, 0xF1, 0xAB, 0xC4, 0xAC, 0x18, 0x1E, 0x7B, 0x91, 0x7F, 0xFE, 
		0xE1, 0x74, 0x5C, 0x7E, 0x2A, 0x25, 0x8E, 0x25, 0x86, 0x94, 0x17, 0x60, 0x0E, 0x98, 0x54, 0x10, 
		0x3A, 0xF4, 0xC5, 0x59, 0xEC, 0x2D, 0x55, 0xC3, 0xA7, 0x4E, 0xF2, 0xD3, 0x5D, 0x37, 0xE7, 0x61, 
		0xCB, 0xF9, 0x48, 0xF6, 0xC7, 0x3B, 0x8E, 0x47, 0x4A, 0x85, 0x70, 0x6C, 0xCA, 0x6E, 0x31, 0xA4, 
		0x42, 0x6B, 0xC9, 0x17, 0x4D, 0x33, 0x77, 0xFB, 0x43, 0xCB, 0xF5, 0x98, 0x2A, 0x54, 0x96, 0x5B, 
		0xE9, 0xBF, 0x88, 0xE8, 0x7D, 0xAD, 0x80, 0x38, 0x1E, 0x16, 0x81, 0x6B, 0xAA, 0xDB, 0x68, 0xD6, 
		0x26, 0x53, 0x7E, 0xB7, 0x16, 0xFE, 0xAC, 0x69, 0x9B, 0xB3, 0xCF, 0x78, 0x4A, 0x36, 0xFB, 0xCC, 
		0xB6, 0x56, 0xF4, 0xE5, 0x7F, 0x43, 0xF1, 0x81, 0x68, 0x68, 0x85, 0x3E, 0x55, 0x0D, 0x27, 0x23, 
		0x55, 0x3B, 0x33, 0x1F, 0x04, 0x52, 0x77, 0xFF, 0x00, 0xB7, 0xB6, 0x14, 0xD6, 0x4F, 0x11, 0xB9, 
		0xDA, 0xE4, 0x7B, 0x49, 0x5F, 0x1C, 0x54, 0xCB, 0x1B, 0xC6, 0xED, 0x3A, 0x9B, 0x46, 0x80, 0x6E, 
		0xCA, 0x49, 0x61, 0xBF, 0x4D, 0xC9, 0xC4, 0xA9, 0x2B, 0x16, 0x92, 0x19, 0x29, 0x67, 0x11, 0x33, 
		0x01, 0xA9, 0x4C, 0x6B, 0xAD, 0x98, 0x9E, 0x63, 0xE9, 0x6C, 0x59, 0x59, 0x04, 0xD5, 0x93, 0x1A, 
		0x88, 0x9A, 0x38, 0x91, 0x17, 0x6B, 0x0E, 0xBE, 0x7C, 0x87, 0xAE, 0x28, 0xA0, 0xCC, 0x22, 0x82, 
		0x9C, 0xC1, 0xA2, 0x44, 0x23, 0x77, 0x91, 0x06, 0xBB, 0xB6, 0xFB, 0xDC, 0x7D, 0x30, 0xC0, 0xCF, 
		0x43, 0xC6, 0x95, 0x4D, 0x25, 0xA6, 0x0B, 0x22, 0x9E, 0x6A, 0xEA, 0x2C, 0x7D, 0xB0, 0xDE, 0x87, 
		0x37, 0xA1, 0xAB, 0x3A, 0x96, 0x19, 0xE8, 0xE4, 0xEA, 0xD0, 0x9E, 0xE9, 0xF4, 0xF0, 0xF7, 0xC0, 
		0x94, 0x3C, 0x04, 0xC0, 0x09, 0x6B, 0x66, 0x48, 0xD0, 0x73, 0xDF, 0xF3, 0xC3, 0x68, 0x5B, 0x22, 
		0xC9, 0x48, 0x55, 0x99, 0xE7, 0x90, 0xED, 0x65, 0x62, 0x01, 0xF3, 0x3F, 0xFD, 0xC1, 0x4E, 0x5F, 
		0x42, 0x9E, 0x4B, 0xB1, 0x9D, 0x14, 0x0D, 0x23, 0x4C, 0xF2, 0xCA, 0x2A, 0x61, 0x94, 0x29, 0x36, 
		0x8F, 0x49, 0xB8, 0xE5, 0x71, 0xD6, 0xE0, 0x9C, 0x01, 0xC4, 0xF1, 0xBC, 0xB0, 0x9A, 0x78, 0xE3, 
		0xD5, 0xDD, 0x0A, 0x83, 0xFD, 0xA0, 0x72, 0x3F, 0x88, 0xF4, 0xC1, 0x79, 0x66, 0x68, 0x95, 0x99, 
		0x8F, 0xD9, 0x69, 0xA3, 0x81, 0x57, 0x49, 0x66, 0x29, 0x7B, 0xA8, 0x02, 0xF7, 0xB8, 0xEB, 0xB7, 
		0xCE, 0x2D, 0xFF, 0x00, 0x53, 0xAE, 0x35, 0x35, 0x31, 0xD2, 0xC3, 0x49, 0x68, 0x40, 0xD4, 0x26, 
		0x40, 0xC4, 0x9F, 0xA5, 0xFF, 0x00, 0x0C, 0x66, 0x93, 0xD3, 0x46, 0xD3, 0x46, 0x2F, 0x26, 0xE1, 
		0x37, 0xA8, 0xAB, 0x2D, 0x50, 0xC1, 0x56, 0x3B, 0x31, 0xBF, 0x2B, 0x78, 0xFE, 0x18, 0xD5, 0x07, 
		0x58, 0xEB, 0x26, 0x67, 0x16, 0x5A, 0x68, 0x96, 0x25, 0x5F, 0x4B, 0xB7, 0xC0, 0x3F, 0xFB, 0x63, 
		0xCA, 0xBC, 0xC7, 0x34, 0x68, 0xC2, 0x34, 0x14, 0x90, 0x99, 0x58, 0x22, 0xBA, 0x40, 0x11, 0xAE, 
		0x4F, 0x43, 0x8A, 0x2A, 0xB2, 0xD8, 0x50, 0xC2, 0xB0, 0x33, 0x2B, 0xB3, 0x2C, 0x4C, 0x58, 0x9E, 
		0xF9, 0x6E, 0xBE, 0x7B, 0xDF, 0xD3, 0x1A, 0xBD, 0x7D, 0x90, 0x92, 0x5D, 0x01, 0xE6, 0xF5, 0xC2, 
		0x8B, 0x2B, 0xA7, 0x57, 0xDE, 0x49, 0xDC, 0xCE, 0xE0, 0xFD, 0x79, 0x7C, 0x00, 0x7D, 0x70, 0xCE, 
		0xA8, 0x45, 0x9C, 0x70, 0x9C, 0x86, 0x31, 0xAB, 0xB2, 0x2E, 0xAB, 0x7D, 0xFE, 0xE9, 0x36, 0xF8, 
		0x23, 0xDB, 0x18, 0xFE, 0x33, 0xA9, 0x2F, 0x9A, 0x94, 0x53, 0x65, 0x43, 0x65, 0x1E, 0x00, 0x6C, 
		0x07, 0xB0, 0xC3, 0xBE, 0x01, 0xAF, 0x15, 0x14, 0x75, 0x34, 0x12, 0x30, 0x04, 0x82, 0x54, 0x1F, 
		0xA7, 0xF6, 0x27, 0x13, 0x53, 0xEB, 0xC8, 0x4A, 0xBD, 0xB0, 0x64, 0x1A, 0x1C, 0x9B, 0x86, 0xE8, 
		0xE2, 0x90, 0xE9, 0xED, 0x48, 0x79, 0x0F, 0x5B, 0x1B, 0x7E, 0x56, 0x3E, 0xB8, 0x86, 0x59, 0x5A, 
		0x2A, 0xB2, 0x65, 0xA9, 0xE6, 0x69, 0x27, 0x25, 0x80, 0xEA, 0x84, 0x9B, 0x8F, 0x6D, 0x5E, 0xF8, 
		0x49, 0xC7, 0x95, 0xE4, 0xD4, 0x45, 0x4A, 0x87, 0x64, 0x00, 0x6D, 0xF8, 0x7E, 0x5E, 0x98, 0x87, 
		0x01, 0xD4, 0xBC, 0x86, 0xB2, 0x99, 0xB7, 0x8D, 0xA3, 0x2C, 0xD7, 0xFA, 0x0B, 0xFF, 0x00, 0x4E, 
		0x1A, 0x9F, 0x5E, 0x40, 0xAB, 0xDB, 0x0D, 0x3C, 0x90, 0x7E, 0xFA, 0x6A, 0x7D, 0x41, 0xC5, 0x42, 
		0x10, 0x00, 0xE6, 0x59, 0x7F, 0x55, 0x2D, 0x6F, 0x4C, 0x65, 0x73, 0xFE, 0x16, 0xA7, 0xA6, 0xCD, 
		0x89, 0xCA, 0x66, 0x69, 0x69, 0x5C, 0x07, 0x5E, 0xD0, 0x59, 0x96, 0xFF, 0x00, 0xC2, 0x7E, 0xA3, 
		0xC7, 0x1A, 0x1A, 0x2A, 0x58, 0x82, 0xC3, 0x50, 0xE1, 0xE4, 0x93, 0x53, 0x76, 0x76, 0x72, 0xAD, 
		0xA4, 0x77, 0x41, 0xB8, 0xE4, 0x41, 0x04, 0xF5, 0xF5, 0x18, 0x2E, 0x2C, 0xCF, 0x37, 0x31, 0x0D, 
		0x30, 0xD1, 0x49, 0xDE, 0x60, 0xC1, 0xA1, 0x1A, 0x83, 0x03, 0x63, 0x7B, 0xE0, 0x5A, 0xBA, 0x1B, 
		0x5B, 0xD9, 0x0E, 0x17, 0x49, 0x0D, 0x24, 0xB4, 0xF2, 0x28, 0x08, 0xB1, 0x84, 0xB1, 0xB0, 0xEB, 
		0x60, 0x47, 0xB9, 0xF8, 0xC5, 0xB5, 0xB4, 0xB2, 0x9A, 0xC1, 0x34, 0x53, 0x24, 0x30, 0x46, 0xA5, 
		0x43, 0x32, 0x96, 0x20, 0x1E, 0x7B, 0x0F, 0x33, 0x82, 0xA8, 0x73, 0x7A, 0xD9, 0x67, 0xA8, 0x8E, 
		0xAD, 0x29, 0x90, 0xD3, 0xC6, 0x1F, 0x4C, 0x71, 0x01, 0xB9, 0x65, 0x5E, 0x63, 0xCF, 0x0A, 0x1F, 
		0x88, 0x90, 0xCE, 0xD1, 0xCE, 0xB1, 0xB1, 0xBE, 0x9D, 0x32, 0x0B, 0x83, 0xEB, 0xE3, 0xE7, 0x8C, 
		0xF1, 0xEE, 0xA2, 0xF5, 0x67, 0x90, 0x4A, 0xFC, 0xD2, 0x82, 0x9E, 0xCD, 0x37, 0xDA, 0xAB, 0x9C, 
		0x72, 0x32, 0x77, 0x50, 0x7A, 0x78, 0x7B, 0x61, 0x35, 0x47, 0x19, 0xCE, 0x8E, 0x16, 0x9A, 0x34, 
		0x85, 0x07, 0xF0, 0xA2, 0x01, 0xF8, 0xEE, 0x71, 0xA1, 0xFB, 0x46, 0x41, 0x9B, 0xB9, 0x8E, 0xAB, 
		0x54, 0x12, 0x72, 0xDD, 0x8E, 0xDE, 0xDB, 0x7C, 0x0C, 0x01, 0x59, 0xC0, 0x50, 0xD4, 0xFE, 0xF2, 
		0x82, 0xAC, 0x69, 0x3E, 0x36, 0x23, 0xDE, 0xF6, 0xF9, 0xC5, 0xCD, 0x4A, 0xFA, 0x44, 0x39, 0xA7, 
		0xF2, 0xCA, 0xF8, 0xE2, 0xAE, 0x78, 0xB3, 0x09, 0x63, 0x0F, 0xB2, 0xB1, 0x51, 0xE8, 0x71, 0x8B, 
		0x91, 0xE5, 0x66, 0xEF, 0x39, 0x62, 0x0F, 0x8E, 0x3A, 0x76, 0x73, 0x92, 0xB5, 0x74, 0x93, 0x4B, 
		0x2A, 0x44, 0x35, 0xC8, 0x6D, 0x24, 0x92, 0x00, 0x07, 0xF9, 0xBE, 0x15, 0x53, 0x64, 0x39, 0x55, 
		0x33, 0x73, 0x92, 0xB6, 0x5F, 0x08, 0x97, 0x6F, 0xFD, 0x8F, 0xE8, 0x71, 0x51, 0x69, 0x22, 0x6A, 
		0x1B, 0x65, 0x1C, 0x07, 0x4F, 0x51, 0x4F, 0x51, 0x35, 0x4B, 0xC6, 0xC6, 0x27, 0x89, 0x92, 0xFE, 
		0x17, 0xDA, 0xF8, 0x75, 0xF6, 0x95, 0xA5, 0xAE, 0xAC, 0x13, 0xB1, 0xED, 0x24, 0xD2, 0x55, 0x52, 
		0xCE, 0x49, 0xB9, 0xF0, 0xE5, 0xCF, 0x1E, 0xA2, 0xD5, 0x2D, 0x33, 0x2D, 0x2A, 0x45, 0x47, 0x12, 
		0xEF, 0x65, 0x25, 0x98, 0x9F, 0xA9, 0xE4, 0x0F, 0xB6, 0x28, 0xA1, 0xCC, 0x22, 0x82, 0x9C, 0xC1, 
		0xA2, 0x44, 0x23, 0x77, 0x91, 0x06, 0xBB, 0xB6, 0xFB, 0xDC, 0x61, 0x3F, 0x2F, 0x4A, 0x4B, 0x16, 
		0x04, 0x1A, 0xAA, 0x9A, 0xCA, 0xA4, 0xA1, 0xA6, 0x58, 0x63, 0x76, 0x75, 0x7B, 0xCC, 0xA6, 0x36, 
		0x56, 0x0D, 0xD7, 0xCB, 0xC7, 0xC3, 0x12, 0xCD, 0xA7, 0x34, 0xD3, 0xC7, 0x08, 0x8A, 0x45, 0xA8, 
		0xA7, 0x9B, 0x5C, 0x91, 0x48, 0x84, 0x14, 0xB5, 0x8D, 0xAF, 0xC8, 0xF5, 0xB1, 0xEA, 0x30, 0x3D, 
		0x5E, 0x62, 0x0C, 0x24, 0x44, 0xF3, 0x83, 0x23, 0xA9, 0x32, 0x3C, 0x60, 0x0B, 0x83, 0x7D, 0x89, 
		0x3B, 0x1D, 0xCF, 0x2F, 0x1B, 0x72, 0x38, 0x3A, 0x10, 0xD1, 0x1A, 0x86, 0x35, 0x22, 0x78, 0xEA, 
		0x42, 0x92, 0xEE, 0xA1, 0x6C, 0x45, 0xC5, 0xBC, 0x0E, 0xDE, 0x1E, 0x03, 0x07, 0x43, 0xEC, 0xC7, 
		0xF1, 0xC5, 0x08, 0x8E, 0xB6, 0x39, 0xE1, 0xD4, 0x56, 0x5B, 0xEE, 0x4D, 0xEF, 0xE1, 0x6D, 0xBA, 
		0xF3, 0xF5, 0xC3, 0x3E, 0x04, 0xA2, 0x5A, 0x5A, 0x1A, 0xAA, 0xF9, 0x40, 0xD8, 0x69, 0x53, 0xE7, 
		0xFD, 0x81, 0xF7, 0xC1, 0xB9, 0xB5, 0x12, 0xD6, 0x64, 0x88, 0xAE, 0x3B, 0xD4, 0xD2, 0x84, 0x63, 
		0xCC, 0xD8, 0x5A, 0xDF, 0xCA, 0x54, 0x7A, 0x63, 0xEA, 0xDD, 0x39, 0x2F, 0x07, 0x45, 0x0A, 0x11, 
		0xAA, 0x40, 0x5B, 0x6E, 0xB7, 0xFF, 0x00, 0x01, 0x1E, 0x78, 0x5C, 0xB6, 0x78, 0x89, 0xCE, 0x56, 
		0x80, 0xFE, 0xD0, 0x28, 0x4C, 0xC9, 0x4D, 0x56, 0x2E, 0x54, 0xEC, 0x4D, 0xFA, 0x10, 0x37, 0xF6, 
		0xB6, 0x01, 0xE0, 0x78, 0x5A, 0x05, 0xAE, 0xAB, 0x6D, 0xA3, 0x58, 0x99, 0x4D, 0xFA, 0xDC, 0x5B, 
		0xFA, 0xB1, 0xA5, 0xB2, 0x67, 0x7C, 0x21, 0x11, 0x3D, 0xE7, 0x40, 0x11, 0xBC, 0xC7, 0x8F, 0xA1, 
		0xF8, 0xC0, 0xD4, 0x34, 0x42, 0x9F, 0x2A, 0x8A, 0x93, 0x91, 0xAA, 0x9D, 0x99, 0x8F, 0x82, 0x29, 
		0x3B, 0xFF, 0x00, 0xDB, 0xDB, 0x04, 0xD6, 0x4F, 0x10, 0x73, 0xB5, 0xC8, 0xF6, 0x92, 0xBE, 0x38, 
		0xA9, 0x96, 0x39, 0x23, 0x76, 0x9D, 0x4D, 0xA3, 0x40, 0x37, 0x65, 0x62, 0x58, 0x6F, 0xD3, 0x72, 
		0x71, 0x2A, 0x4A, 0xC5, 0xA4, 0x86, 0x4A, 0x5A, 0x81, 0x1B, 0x30, 0x1A, 0x94, 0xC6, 0xBA, 0xD9, 
		0x89, 0xE6, 0x3E, 0x96, 0xC5, 0x95, 0x90, 0x4D, 0x59, 0x31, 0xA8, 0x89, 0x92, 0x25, 0x45, 0xE8, 
		0x3A, 0xF9, 0xF2, 0x1E, 0xB8, 0xA2, 0x83, 0x30, 0x8A, 0x0A, 0x73, 0x06, 0x89, 0x10, 0x8D, 0xDE, 
		0x44, 0x1A, 0xEE, 0xDB, 0xEF, 0xB6, 0x18, 0x04, 0xD1, 0xB8, 0x7A, 0xFA, 0xC4, 0x5D, 0x62, 0x59, 
		0x60, 0x16, 0x8D, 0x94, 0xAB, 0x02, 0x1D, 0x49, 0x16, 0xF2, 0x07, 0x19, 0x8E, 0x28, 0xE1, 0xFA, 
		0xFA, 0x6A, 0x48, 0xF3, 0x4B, 0x2B, 0x52, 0xCC, 0xC5, 0x35, 0x46, 0xD7, 0x28, 0xDE, 0x0C, 0x3A, 
		0x1C, 0x68, 0x2A, 0xF3, 0x2F, 0xDD, 0x7E, 0xE6, 0x49, 0xD5, 0x9D, 0xD4, 0x99, 0x1E, 0x30, 0x37, 
		0x53, 0x71, 0x62, 0x4E, 0xC4, 0x5C, 0xF2, 0xF1, 0xB7, 0x23, 0x82, 0x27, 0x49, 0x35, 0x76, 0x9A, 
		0xA1, 0xAC, 0x47, 0xEF, 0x5E, 0x48, 0xC2, 0x1B, 0x9E, 0x60, 0x11, 0x71, 0x7C, 0x1B, 0x9E, 0x43, 
		0x8F, 0x2F, 0x07, 0x2E, 0x8D, 0xE4, 0xED, 0x36, 0x72, 0xA7, 0xC4, 0xF2, 0xC7, 0x48, 0xE0, 0x08, 
		0x84, 0xB9, 0x36, 0x61, 0x51, 0x28, 0xFD, 0xF2, 0x58, 0x23, 0x9E, 0x83, 0x52, 0xDF, 0xF3, 0xC5, 
		0x33, 0xE5, 0x59, 0x4C, 0xED, 0xAE, 0x6A, 0x77, 0xA3, 0x97, 0xFD, 0xDA, 0x6E, 0x9E, 0xE3, 0x63, 
		0xF1, 0x87, 0x19, 0x1E, 0x53, 0x26, 0x5F, 0x04, 0xDA, 0x34, 0xB4, 0x53, 0xC6, 0x57, 0x5C, 0x6D, 
		0x70, 0xDB, 0x82, 0x0D, 0xBD, 0x2D, 0x85, 0x7F, 0xD3, 0x92, 0xC1, 0x2F, 0xE6, 0xE5, 0xEE, 0x91, 
		0xCC, 0x69, 0x73, 0x1A, 0xE3, 0x14, 0xA1, 0x21, 0x14, 0xA0, 0x06, 0x44, 0xD5, 0xB1, 0xBF, 0x22, 
		0x71, 0xE3, 0xA5, 0x71, 0x52, 0xD3, 0x9A, 0x58, 0x17, 0xF8, 0x9B, 0x41, 0x6F, 0xE5, 0xDC, 0x7C, 
		0x60, 0xBA, 0x3A, 0xED, 0x35, 0x35, 0x30, 0xC2, 0x8A, 0x90, 0xC3, 0x10, 0x72, 0x96, 0xB8, 0xD4, 
		0x58, 0x29, 0xD2, 0x3F, 0x84, 0x10, 0x45, 0xC6, 0xE2, 0xE3, 0xA6, 0xD6, 0x4F, 0x27, 0x11, 0xC6, 
		0x67, 0x68, 0xE7, 0x58, 0xD8, 0xDF, 0x4E, 0x99, 0x37, 0x07, 0xEB, 0x73, 0xD7, 0xCF, 0x11, 0xE7, 
		0xF0, 0xD3, 0x57, 0xE8, 0x2D, 0x7E, 0x69, 0x41, 0x4D, 0x66, 0x9B, 0xED, 0x55, 0xCE, 0x39, 0x19, 
		0x2E, 0xA8, 0x3D, 0x3C, 0x3D, 0xB0, 0x9A, 0xA3, 0x8C, 0xE7, 0x47, 0x0B, 0x4D, 0x1A, 0x42, 0x83, 
		0xF8, 0x51, 0x00, 0xF9, 0x3B, 0x9C, 0x68, 0x3E, 0xD3, 0x90, 0x67, 0x0E, 0x63, 0xA9, 0x26, 0x09, 
		0x39, 0x6E, 0xC7, 0x6F, 0x6D, 0xBE, 0x06, 0x00, 0xAC, 0xE0, 0x48, 0x2A, 0x4E, 0xBA, 0x0A, 0xC1, 
		0x63, 0xD0, 0xD8, 0x8F, 0x7B, 0xDB, 0xE7, 0x17, 0x35, 0x2B, 0xE9, 0x10, 0xE5, 0xBF, 0x96, 0x2C, 
		0x87, 0x8D, 0x2A, 0x9A, 0x4B, 0x4C, 0x16, 0x45, 0x3C, 0xD5, 0xD4, 0x58, 0xFB, 0x61, 0xC5, 0x0E, 
		0x6F, 0x43, 0x56, 0x75, 0x2C, 0x33, 0xD1, 0xC9, 0xD5, 0xA1, 0x3D, 0xD3, 0xE9, 0xE1, 0xEF, 0x80, 
		0xE8, 0x78, 0x10, 0x82, 0x1E, 0xB6, 0x78, 0xE2, 0x1D, 0x6E, 0x46, 0x1B, 0x42, 0xF9, 0x0E, 0x4A, 
		0x42, 0x2C, 0xED, 0x3C, 0xA7, 0x6D, 0x2A, 0xC4, 0x03, 0xE6, 0x7A, 0x7C, 0xE1, 0xD3, 0x9F, 0xF2, 
		0x29, 0xE4, 0xBB, 0x1A, 0x51, 0x40, 0xD2, 0x34, 0xAF, 0x2C, 0xA2, 0xA6, 0x19, 0x42, 0x93, 0x68, 
		0xF4, 0x9B, 0x8E, 0x57, 0x1D, 0x76, 0x27, 0x00, 0x71, 0x34, 0x6F, 0x2C, 0x46, 0x9E, 0x38, 0xF5, 
		0x1D, 0x21, 0x50, 0x11, 0xF7, 0x40, 0xE4, 0x7F, 0x11, 0xE9, 0x82, 0xF2, 0xCC, 0xD1, 0x2B, 0x73, 
		0x0F, 0xB2, 0xD3, 0x47, 0x02, 0xAE, 0x92, 0xCC, 0x52, 0xF7, 0x50, 0x05, 0xEF, 0x71, 0xD7, 0x6F, 
		0x9C, 0x5B, 0xFE, 0xA9, 0x5C, 0xD5, 0x15, 0x29, 0x4B, 0x15, 0x26, 0x98, 0x95, 0x75, 0x09, 0x90, 
		0x35, 0xCF, 0xD2, 0xFF, 0x00, 0x86, 0x33, 0x49, 0xE9, 0xA3, 0x69, 0xA0, 0x6E, 0x18, 0x49, 0x5A, 
		0x92, 0x58, 0x25, 0x00, 0x28, 0x8C, 0x21, 0x04, 0x81, 0x7D, 0xEC, 0x08, 0xF1, 0x3B, 0x9C, 0x5B, 
		0x5D, 0x4B, 0x29, 0xAC, 0x13, 0x47, 0x32, 0x43, 0x04, 0x6B, 0xA4, 0x33, 0x29, 0x6B, 0x03, 0xB9, 
		0xD8, 0x79, 0x9C, 0x13, 0x97, 0xE6, 0xF5, 0xB2, 0xCD, 0x51, 0x1D, 0x52, 0x53, 0xA1, 0xA7, 0x8C, 
		0x3E, 0x98, 0xE2, 0x0A, 0x6E, 0x59, 0x56, 0xDF, 0x38, 0x51, 0x27, 0x11, 0xC7, 0xDB, 0xB4, 0x75, 
		0x0B, 0x1B, 0x1B, 0xE9, 0xD3, 0x26, 0xE0, 0xFD, 0x6F, 0xE3, 0xE7, 0x83, 0x1E, 0xEA, 0x0D, 0x59, 
		0xE4, 0x16, 0xBF, 0x34, 0xA0, 0xA7, 0xB3, 0x4D, 0xF6, 0xAA, 0xE7, 0x1C, 0x8C, 0x9D, 0xD4, 0x1E, 
		0x9E, 0x1E, 0xD8, 0x4D, 0x51, 0xC6, 0x73, 0xA3, 0x85, 0xA6, 0x8D, 0x21, 0x41, 0xFC, 0x28, 0x80, 
		0x7E, 0x3B, 0x9C, 0x68, 0x05, 0x4E, 0x41, 0x9C, 0x39, 0x8E, 0xA4, 0x98, 0x24, 0xE5, 0xBB, 0x1D, 
		0xBD, 0xB6, 0xF8, 0x18, 0x02, 0xB3, 0x80, 0xE0, 0xA9, 0x3A, 0xE8, 0x2B, 0x05, 0x8F, 0x43, 0x62, 
		0x3D, 0xEF, 0x6F, 0x9C, 0x5C, 0xD4, 0xAF, 0xA4, 0x43, 0x96, 0xFE, 0x58, 0xB2, 0x1E, 0x34, 0xAA, 
		0x69, 0x2D, 0x30, 0x59, 0x14, 0xF3, 0x57, 0x51, 0x63, 0xED, 0x87, 0x14, 0x39, 0xBD, 0x0D, 0x59, 
		0x25, 0x61, 0x9E, 0x8E, 0x42, 0x37, 0x68, 0x4F, 0x74, 0xFA, 0x78, 0x7B, 0xE0, 0x3A, 0x1E, 0x04, 
		0x22, 0xCF, 0x5B, 0x3A, 0x44, 0x3A, 0x82, 0x46, 0x1B, 0x43, 0x26, 0x43, 0x92, 0x90, 0x8B, 0x3B, 
		0x4F, 0x29, 0xDB, 0x4A, 0xB1, 0x00, 0xF9, 0x9E, 0x9F, 0x38, 0x74, 0xE5, 0xF4, 0x29, 0xE4, 0xBB, 
		0x0F, 0x8E, 0x2A, 0xA3, 0x09, 0x34, 0xE6, 0x9E, 0xA5, 0x1B, 0x6B, 0xBC, 0x6C, 0x84, 0x75, 0xE5, 
		0xCB, 0x04, 0xD3, 0x55, 0xD7, 0x52, 0xF6, 0xF3, 0x54, 0x45, 0x4C, 0x29, 0x6F, 0xA8, 0xAC, 0x6D, 
		0x61, 0x1B, 0x1E, 0x7A, 0x41, 0xE8, 0x7A, 0xAF, 0x2F, 0x2E, 0x83, 0xE5, 0x99, 0xA2, 0x56, 0xE6, 
		0x1F, 0x65, 0xA6, 0x8E, 0x05, 0x4D, 0x25, 0x98, 0xA5, 0xEE, 0xA0, 0x0B, 0xDE, 0xE3, 0xAE, 0xDF, 
		0x38, 0xFA, 0x59, 0x46, 0x61, 0x5A, 0xEB, 0x50, 0x3F, 0x71, 0x4A, 0x05, 0xE2, 0x07, 0x67, 0x63, 
		0xD4, 0xE3, 0x3F, 0x3F, 0xA6, 0x9A, 0x8B, 0x72, 0xF4, 0x15, 0x32, 0xD5, 0x54, 0xA4, 0x4C, 0x90, 
		0x4D, 0x18, 0x8C, 0x33, 0xB7, 0xDE, 0x21, 0x81, 0x24, 0x0F, 0x0D, 0xBE, 0x70, 0xB6, 0x4E, 0x19, 
		0x89, 0xE4, 0x92, 0x4A, 0xA3, 0x18, 0x24, 0xD8, 0xBB, 0x35, 0x80, 0xDF, 0xA7, 0x8E, 0xDE, 0x36, 
		0xC3, 0x9A, 0xC8, 0xEB, 0x69, 0xA9, 0x96, 0x5A, 0x46, 0x8D, 0xE2, 0x8B, 0xBB, 0x2A, 0x48, 0xA4, 
		0x34, 0x2B, 0xC8, 0x1D, 0x88, 0x05, 0x7E, 0xB6, 0x16, 0x3C, 0xF0, 0x2C, 0xEF, 0x58, 0x14, 0x89, 
		0xD6, 0x96, 0x45, 0xB9, 0x52, 0xAA, 0xCC, 0xB7, 0xF1, 0xB1, 0x17, 0x18, 0x1E, 0x82, 0x49, 0x8A, 
		0xDA, 0x9F, 0x87, 0xF2, 0x38, 0x83, 0xB8, 0x35, 0x0F, 0xCC, 0x77, 0x79, 0xFF, 0x00, 0x9E, 0xB8, 
		0x5B, 0x5B, 0xC7, 0x2A, 0x8A, 0x52, 0x8A, 0x9E, 0x38, 0x87, 0x21, 0xDD, 0xB9, 0xFD, 0x30, 0xC6, 
		0xB3, 0x2F, 0xCB, 0x6A, 0x93, 0x4D, 0x4A, 0x54, 0xD1, 0xFD, 0x75, 0x16, 0x41, 0xE4, 0x77, 0x07, 
		0xE3, 0x09, 0x6A, 0xB8, 0x1A, 0x66, 0x43, 0x25, 0x05, 0x40, 0xA9, 0x42, 0x40, 0xB2, 0x8B, 0x91, 
		0xCF, 0xC3, 0xCB, 0xE7, 0x17, 0x3C, 0x5F, 0xD1, 0x15, 0x35, 0xFE, 0x4B, 0xA8, 0xB8, 0xE5, 0x88, 
		0x02, 0xAE, 0x18, 0xE5, 0x1F, 0x55, 0xB1, 0xFD, 0x3D, 0xF0, 0xEA, 0x39, 0x72, 0x2C, 0xEE, 0x36, 
		0x26, 0x97, 0xB1, 0x36, 0xB9, 0x21, 0x6D, 0x6F, 0x50, 0x3F, 0x21, 0x8C, 0xDC, 0x3C, 0x11, 0x58, 
		0x08, 0x6A, 0x96, 0x58, 0x53, 0xA9, 0x73, 0xA4, 0x0F, 0x7C, 0x38, 0xA1, 0xCA, 0xF2, 0xFA, 0x3E, 
		0xEA, 0x4B, 0x51, 0x58, 0xFD, 0x56, 0x10, 0x42, 0x9F, 0x53, 0x82, 0xE6, 0x7F, 0x02, 0x5D, 0x2E, 
		0xC7, 0x39, 0x4E, 0x4E, 0x94, 0x55, 0x8B, 0x3D, 0x1B, 0xC4, 0xE8, 0x14, 0xA3, 0x59, 0xB7, 0x60, 
		0x6E, 0x39, 0x78, 0x8B, 0xDF, 0x9F, 0x4C, 0x7B, 0x2D, 0x25, 0x7D, 0x15, 0x74, 0xB2, 0x41, 0x4C, 
		0xB3, 0xAC, 0xBF, 0x7D, 0x1A, 0x36, 0x20, 0x58, 0x9F, 0x01, 0x89, 0x50, 0x55, 0x9E, 0xD2, 0x55, 
		0x99, 0x04, 0x10, 0xA1, 0x45, 0x3D, 0xF2, 0xED, 0xA8, 0x9D, 0xAE, 0x4E, 0xDB, 0x00, 0x71, 0x57, 
		0x10, 0x66, 0x75, 0x59, 0x68, 0x15, 0x74, 0x95, 0x52, 0x42, 0x24, 0x55, 0x3A, 0x43, 0x77, 0x5B, 
		0xFC, 0x1F, 0x8E, 0x21, 0x6E, 0xE3, 0x2D, 0xE6, 0x78, 0x08, 0xA0, 0x82, 0xA6, 0x5A, 0x8A, 0xB9, 
		0xAA, 0xA9, 0x96, 0x9C, 0x4D, 0x1A, 0xA0, 0x01, 0x58, 0x03, 0xDE, 0x0D, 0xB5, 0xFF, 0x00, 0xE3, 
		0x85, 0x92, 0x70, 0xCC, 0x4F, 0x2C, 0x92, 0x55, 0x76, 0x60, 0x93, 0x62, 0xEC, 0xD6, 0x0B, 0xBF, 
		0x4F, 0x1F, 0x5B, 0x60, 0xFC, 0x9F, 0x32, 0xCC, 0x2A, 0x69, 0x24, 0x9E, 0xBE, 0x63, 0x2C, 0x66, 
		0x30, 0xC3, 0x57, 0x7B, 0x49, 0xBD, 0xC5, 0xBC, 0x0E, 0xC7, 0xD8, 0x62, 0x55, 0xB3, 0x4A, 0xF5, 
		0x51, 0xC5, 0x4F, 0x1A, 0x4F, 0x04, 0xAA, 0xC4, 0x06, 0x62, 0x97, 0xB7, 0x3B, 0x1F, 0xD7, 0xEB, 
		0x81, 0xB7, 0xBE, 0x01, 0x63, 0x42, 0x96, 0xA7, 0xE1, 0xFC, 0x8E, 0x20, 0xEE, 0x0D, 0x43, 0xF4, 
		0xEE, 0xF3, 0xFF, 0x00, 0x3D, 0x70, 0xB6, 0xB7, 0x8E, 0x55, 0x10, 0xA5, 0x15, 0x3C, 0x71, 0x0E, 
		0x43, 0xBB, 0x73, 0xFA, 0x61, 0x8D, 0x66, 0x5F, 0x96, 0xD5, 0x26, 0x9A, 0x94, 0xA9, 0xA3, 0xFA, 
		0xEA, 0x2C, 0x83, 0xC8, 0xEE, 0x0F, 0xC6, 0x12, 0xD5, 0x70, 0x34, 0xCC, 0x86, 0x4A, 0x0A, 0x85, 
		0xA9, 0x42, 0xC0, 0x59, 0x45, 0xC8, 0xE7, 0xE1, 0xE5, 0xF3, 0x8B, 0x9E, 0x2F, 0xE8, 0x8A, 0x54, 
		0xBE, 0x4B, 0xA8, 0xB8, 0xE5, 0x88, 0x02, 0xAE, 0x18, 0xE5, 0x1F, 0x55, 0xB1, 0xFD, 0x3D, 0xF0, 
		0xEA, 0x39, 0x72, 0x2C, 0xEE, 0x36, 0x26, 0x97, 0xB1, 0x36, 0xBB, 0x10, 0xB6, 0xB7, 0xA8, 0x1F, 
		0x90, 0xC6, 0x6E, 0x1E, 0x08, 0xAC, 0x04, 0x35, 0x4B, 0x2C, 0x29, 0xD4, 0xB9, 0xD2, 0x07, 0xBE, 
		0x1C, 0x50, 0xE5, 0x79, 0x7D, 0x1F, 0x75, 0x25, 0x9E, 0xB1, 0xFA, 0xAC, 0x37, 0x0A, 0x7D, 0x4E, 
		0x0B, 0x99, 0xFF, 0x00, 0x21, 0x2E, 0x97, 0x63, 0x9C, 0xA7, 0x27, 0x4A, 0x2A, 0xC5, 0x9E, 0x8D, 
		0xE2, 0x74, 0x0A, 0x51, 0xAC, 0xDB, 0xB2, 0x9B, 0x8E, 0x5E, 0x22, 0xF7, 0xE7, 0xD3, 0x04, 0x8C, 
		0xB5, 0xE9, 0xDE, 0xAA, 0xA2, 0x56, 0x5E, 0xC5, 0xCD, 0xA5, 0xD3, 0x7D, 0x51, 0x01, 0xF7, 0x58, 
		0x8B, 0x7D, 0xD2, 0x4D, 0x89, 0x17, 0xB7, 0x5C, 0x0D, 0x1C, 0xF5, 0x82, 0x26, 0x68, 0x63, 0x82, 
		0x18, 0xC7, 0x31, 0x23, 0xB3, 0x9D, 0xBC, 0x4D, 0xED, 0x7C, 0x5F, 0x94, 0xD4, 0xE6, 0x15, 0x2C, 
		0x67, 0x26, 0x28, 0xA1, 0xDD, 0x43, 0x2A, 0x12, 0x64, 0xB8, 0xB1, 0x00, 0x13, 0x6B, 0x5B, 0x11, 
		0xE5, 0x76, 0x5F, 0x8F, 0xC0, 0x4C, 0xE7, 0x32, 0x96, 0x0A, 0xB9, 0xA3, 0x06, 0x37, 0x31, 0x3B, 
		0x77, 0x1D, 0x6E, 0x18, 0x5F, 0xFC, 0xE5, 0x85, 0x30, 0x67, 0xD9, 0x6C, 0xD2, 0x10, 0xC9, 0x25, 
		0x1C, 0xDC, 0x8B, 0xD3, 0xB7, 0x74, 0xFA, 0x72, 0xB7, 0xA1, 0xC0, 0xFC, 0x65, 0x4F, 0x55, 0x26, 
		0x61, 0x33, 0xD3, 0xC7, 0x29, 0x1A, 0x8D, 0xD9, 0x41, 0x38, 0xC5, 0x14, 0x94, 0x48, 0xC5, 0xAE, 
		0x1C, 0x78, 0x9B, 0x1C, 0x69, 0x10, 0x9A, 0x33, 0xAB, 0x69, 0x9D, 0x42, 0x29, 0x9C, 0x43, 0xF6, 
		0x88, 0x9A, 0x0A, 0xCA, 0x70, 0x6C, 0x59, 0x47, 0x66, 0xD7, 0xF0, 0xF0, 0xFC, 0x31, 0x08, 0x72, 
		0x54, 0x8C, 0xB9, 0xAA, 0x32, 0xA4, 0xBA, 0x8A, 0x3A, 0x03, 0xA7, 0x43, 0x73, 0xB1, 0xB7, 0x30, 
		0x46, 0xE0, 0xF2, 0x3F, 0x38, 0x4F, 0xC0, 0x95, 0x55, 0x53, 0xC9, 0x35, 0x1C, 0x8E, 0xC2, 0x24, 
		0x89, 0x9B, 0x49, 0x00, 0xEA, 0xB6, 0xF6, 0x37, 0xFA, 0xE1, 0xDA, 0xC7, 0x15, 0x46, 0x63, 0x54, 
		0xF5, 0x82, 0x49, 0x16, 0x00, 0x89, 0x1D, 0x9C, 0x82, 0x8B, 0xBE, 0xC3, 0x06, 0x63, 0xC2, 0x93, 
		0xD5, 0xA0, 0xD9, 0x85, 0x04, 0x50, 0xA4, 0x5D, 0x91, 0x61, 0x2E, 0xA0, 0x04, 0x6C, 0xDA, 0xD9, 
		0xFC, 0xAE, 0x08, 0xFC, 0xB0, 0x4C, 0x35, 0x21, 0xBB, 0x60, 0xF0, 0xA4, 0x71, 0xC3, 0x61, 0xA0, 
		0x35, 0xCB, 0x7B, 0x6D, 0xC8, 0x74, 0xF1, 0x18, 0x0E, 0xAA, 0x8A, 0x7A, 0x6A, 0xA2, 0xD4, 0xF7, 
		0xD3, 0x29, 0xEC, 0xD1, 0xE4, 0xDD, 0x89, 0x3F, 0x5C, 0x5B, 0x53, 0x96, 0xC2, 0x86, 0x15, 0x81, 
		0x8A, 0xBB, 0x32, 0xC4, 0xC5, 0x89, 0xEF, 0x16, 0xEB, 0xE7, 0xBD, 0xFD, 0x30, 0xC4, 0x09, 0x9B, 
		0x57, 0x0A, 0x2C, 0xAE, 0x9D, 0x5E, 0xC6, 0x49, 0xDC, 0xCC, 0xE0, 0xFD, 0x79, 0x7C, 0x00, 0x7D, 
		0x70, 0xCE, 0xA8, 0x45, 0x9C, 0x70, 0x9C, 0x86, 0x31, 0xAB, 0xB2, 0x2E, 0xAB, 0x7D, 0xFE, 0xE9, 
		0x36, 0xF8, 0x23, 0xDB, 0x19, 0x0E, 0x33, 0xA9, 0x2F, 0x9A, 0x94, 0x5D, 0x95, 0x0D, 0x94, 0x78, 
		0x01, 0xB0, 0x1E, 0xC3, 0x0E, 0xB8, 0x06, 0xBC, 0x54, 0x51, 0xD4, 0xD0, 0x48, 0xC0, 0x12, 0x09, 
		0x51, 0xE3, 0xFE, 0x02, 0x71, 0x35, 0x3E, 0xBC, 0x84, 0xAB, 0xDB, 0x06, 0x41, 0xA1, 0xC9, 0xB8, 
		0x6E, 0x8E, 0x29, 0x0E, 0x9E, 0xD4, 0x87, 0x90, 0xDF, 0x7D, 0xED, 0xF9, 0x58, 0xFA, 0xE2, 0x19, 
		0x65, 0x77, 0xDA, 0xB2, 0x65, 0xA9, 0xE6, 0x69, 0x27, 0x24, 0x81, 0xD5, 0x09, 0x37, 0x1E, 0xDA, 
		0xBD, 0xF0, 0x93, 0x8F, 0x2B, 0xC9, 0xA8, 0x8A, 0x95, 0x0E, 0xC8, 0x00, 0xB0, 0xFC, 0x3F, 0x2F, 
		0x4C, 0x43, 0x80, 0xEA, 0x5E, 0x43, 0x59, 0x4C, 0xDB, 0xC6, 0xD1, 0x96, 0x6B, 0xFD, 0x05, 0xFF, 
		0x00, 0xA7, 0x0D, 0x4F, 0xAF, 0x20, 0x55, 0xED, 0x86, 0x9E, 0x79, 0x5E, 0x9A, 0xAE, 0x18, 0xE3, 
		0x86, 0x39, 0xD5, 0xC9, 0x4B, 0x2B, 0x69, 0x37, 0x03, 0xF3, 0xE7, 0xBE, 0x29, 0x8B, 0x23, 0x58, 
		0x5A, 0x4F, 0xB5, 0xF6, 0xC9, 0x30, 0x62, 0x92, 0x46, 0x3B, 0x9D, 0x9B, 0x0D, 0xEC, 0x6D, 0xE2, 
		0x39, 0x1E, 0x47, 0x10, 0xA2, 0xA4, 0x87, 0x44, 0x53, 0xC8, 0xAF, 0x24, 0x85, 0x9B, 0x45, 0x98, 
		0xAB, 0x69, 0xFB, 0xA0, 0xED, 0x7B, 0x1B, 0x82, 0x7A, 0xFA, 0x8C, 0x5B, 0x04, 0x4F, 0x5B, 0x33, 
		0x54, 0xE6, 0x9A, 0xA6, 0x65, 0x5E, 0xCD, 0x74, 0xB9, 0x56, 0x8F, 0x49, 0xB5, 0xBF, 0x4E, 0x98, 
		0x3A, 0x2B, 0xB0, 0x6A, 0xFA, 0x08, 0xA2, 0x58, 0xBB, 0x2D, 0x5D, 0xB6, 0xA0, 0x04, 0x6C, 0xDA, 
		0xD9, 0xFC, 0xB6, 0x23, 0xF2, 0xC1, 0x32, 0x49, 0x34, 0x40, 0x89, 0x3E, 0xCB, 0x45, 0x18, 0xEB, 
		0x21, 0x0E, 0x76, 0xDB, 0xEE, 0x8D, 0xBA, 0x73, 0xB6, 0x3E, 0xA1, 0xA6, 0x8E, 0x0C, 0xCA, 0xB1, 
		0x94, 0xB1, 0xEC, 0xA2, 0x56, 0x57, 0x6D, 0xD8, 0x5D, 0xD4, 0x1F, 0x82, 0x71, 0x92, 0xE2, 0x8C, 
		0xCA, 0x5A, 0x8A, 0xD7, 0x16, 0xB3, 0x72, 0xD8, 0xEC, 0x07, 0xD0, 0x74, 0xC3, 0x4B, 0x5E, 0x09, 
		0xBC, 0x5A, 0x3B, 0xA9, 0xCE, 0xB2, 0xD8, 0x5C, 0x76, 0x8F, 0x3D, 0x7C, 0xBC, 0x87, 0x68, 0xDA, 
		0x50, 0x7A, 0x78, 0x7B, 0x61, 0xF6, 0x49, 0x5F, 0x2D, 0x7A, 0xC8, 0x1D, 0x51, 0x22, 0x8A, 0x2D, 
		0x40, 0x46, 0xA4, 0x68, 0x52, 0x6C, 0x07, 0xC9, 0x38, 0xE4, 0x61, 0x64, 0x67, 0x04, 0x5F, 0x51, 
		0xEB, 0x8E, 0x8F, 0xC0, 0x73, 0x76, 0x59, 0x1E, 0x63, 0x0C, 0xE4, 0x89, 0xA4, 0x00, 0xA2, 0xB0, 
		0x3D, 0xE0, 0x0A, 0xF2, 0xF6, 0x38, 0x5F, 0xD2, 0x12, 0x44, 0xCD, 0xB6, 0xC5, 0x54, 0x1C, 0x79, 
		0x22, 0xAE, 0x9A, 0x98, 0xD6, 0x45, 0xEB, 0xB5, 0x8F, 0xC6, 0xC7, 0xD7, 0x0E, 0x52, 0xA3, 0x24, 
		0xCF, 0x63, 0x62, 0xD4, 0xE6, 0x16, 0xB7, 0x78, 0xE9, 0xE5, 0xEA, 0x3E, 0xBF, 0x41, 0x8C, 0xD4, 
		0x3C, 0x11, 0x58, 0x08, 0x6A, 0x96, 0x58, 0x50, 0x73, 0x2E, 0x74, 0x81, 0xEF, 0x87, 0x14, 0x39, 
		0x5E, 0x5F, 0x47, 0xDD, 0x49, 0x6A, 0x2B, 0x1F, 0xAA, 0xC3, 0x70, 0xA7, 0xD4, 0xE1, 0x5C, 0xCF, 
		0x72, 0x54, 0xBB, 0x5E, 0x18, 0xEB, 0x2A, 0xCA, 0x56, 0x8E, 0xB1, 0x27, 0xA4, 0x92, 0x37, 0x40, 
		0xA5, 0x18, 0x06, 0xE6, 0xA6, 0xE2, 0xD6, 0xFA, 0x5E, 0xFC, 0xFA, 0x63, 0xD9, 0x29, 0x6B, 0xE8, 
		0xAB, 0xA5, 0x92, 0x0A, 0x65, 0x9D, 0x64, 0xFB, 0xE8, 0xD1, 0xB1, 0x02, 0xD7, 0xF0, 0x18, 0xF6, 
		0x82, 0xAC, 0xF6, 0x92, 0xAC, 0xC8, 0x20, 0x85, 0x0A, 0x29, 0xEF, 0x97, 0x6D, 0x44, 0xED, 0x72, 
		0x76, 0xD8, 0x03, 0x8A, 0xF3, 0xEC, 0xCA, 0xAB, 0x2E, 0x2B, 0x55, 0x49, 0x57, 0x24, 0x02, 0x55, 
		0x53, 0xA4, 0x37, 0x75, 0xBD, 0x3C, 0xB1, 0x0B, 0x77, 0x19, 0x6F, 0x33, 0xC1, 0x09, 0xE6, 0xCC, 
		0x2A, 0x42, 0x40, 0x28, 0xA9, 0xE9, 0x47, 0x68, 0xAC, 0x64, 0x2A, 0xCA, 0x14, 0x82, 0x2C, 0x49, 
		0x3C, 0x86, 0x21, 0x9A, 0x54, 0xF6, 0x13, 0x45, 0x12, 0xC7, 0x20, 0x9A, 0x09, 0x43, 0xC9, 0x1B, 
		0xA9, 0xBA, 0x5A, 0xCD, 0x6B, 0xF2, 0x3D, 0x6C, 0x7A, 0x8C, 0x26, 0xA5, 0xE3, 0xE9, 0xE6, 0xAE, 
		0x48, 0x6B, 0x9E, 0x49, 0x22, 0xB9, 0x56, 0x47, 0x37, 0x04, 0xF2, 0xFD, 0x71, 0xA1, 0x88, 0xAC, 
		0x72, 0x4A, 0xB1, 0x0B, 0x45, 0x55, 0x12, 0xC8, 0x2F, 0xBE, 0xE3, 0x9F, 0xC1, 0xFE, 0x5C, 0x68, 
		0xF5, 0x76, 0x42, 0xF6, 0xE8, 0xC7, 0x71, 0xC5, 0x08, 0x8E, 0xB6, 0x39, 0xE1, 0xD4, 0x56, 0x5B, 
		0xEE, 0x4D, 0xEF, 0xE1, 0x6D, 0xBA, 0xF3, 0xF5, 0xC3, 0x3E, 0x05, 0xA2, 0x5A, 0x5A, 0x1A, 0xAA, 
		0xF9, 0x40, 0xD8, 0x69, 0x53, 0xE7, 0xFD, 0x81, 0xF7, 0xC1, 0xB9, 0xB5, 0x0A, 0xD6, 0x64, 0x88, 
		0xAE, 0x3B, 0xD4, 0xD2, 0x84, 0x63, 0xD6, 0xC2, 0xD6, 0xFE, 0x52, 0xA3, 0xD0, 0xE3, 0xEA, 0xDD, 
		0x39, 0x2F, 0x07, 0x45, 0x0A, 0x11, 0xAA, 0x40, 0x5B, 0x6E, 0xB7, 0xFF, 0x00, 0x01, 0x1E, 0x78, 
		0x5C, 0xB6, 0x78, 0x83, 0x9C, 0xAD, 0x01, 0xFD, 0xA0, 0x50, 0x99, 0x92, 0x9E, 0xAC, 0x5C, 0xA9, 
		0xD8, 0x9B, 0xF4, 0x20, 0x6F, 0xED, 0x6C, 0x03, 0xC0, 0xF0, 0xB4, 0x0B, 0x5D, 0x56, 0xDB, 0x46, 
		0xB1, 0x32, 0x9B, 0xF5, 0xB8, 0xB7, 0xF5, 0x63, 0x4B, 0x68, 0xF3, 0xBE, 0x10, 0x88, 0x9E, 0xF3, 
		0xA0, 0x08, 0xDE, 0x63, 0xC7, 0xD3, 0xF0, 0xC0, 0xD4, 0x34, 0x42, 0x9F, 0x2A, 0x86, 0x93, 0x91, 
		0xAA, 0x9D, 0x99, 0x8F, 0x82, 0x29, 0x3B, 0xFF, 0x00, 0xDB, 0xDB, 0x04, 0xD6, 0x4F, 0x10, 0x73, 
		0xB5, 0xC8, 0x95, 0x1D, 0x7A, 0x45, 0x4E, 0xB1, 0x3C, 0x6E, 0xD5, 0x0A, 0x6D, 0x1C, 0x6A, 0x37, 
		0x60, 0xC4, 0xB0, 0xDF, 0xA6, 0xE4, 0xE0, 0x8A, 0x61, 0x98, 0x50, 0x47, 0xD8, 0xFF, 0x00, 0xA7, 
		0x43, 0x52, 0x2F, 0xAB, 0x59, 0x56, 0x6D, 0xCE, 0xE4, 0x5C, 0x63, 0xE7, 0xAA, 0x44, 0xAC, 0x9E, 
		0xBA, 0x58, 0xD4, 0x25, 0x32, 0xA8, 0x0A, 0x36, 0xEF, 0x1F, 0xD0, 0x03, 0x8C, 0xF0, 0xE3, 0x9A, 
		0xDA, 0x5A, 0x89, 0x23, 0x8A, 0x77, 0x0A, 0xED, 0x70, 0xB1, 0x9B, 0x28, 0x3E, 0x1F, 0x86, 0x2B, 
		0x1B, 0xE8, 0x1B, 0x48, 0xD6, 0xD0, 0xC1, 0x55, 0x35, 0x45, 0x5C, 0xD5, 0x54, 0xAB, 0x4E, 0x26, 
		0x8D, 0x63, 0x00, 0x2B, 0x01, 0xB3, 0x03, 0xB5, 0xFF, 0x00, 0xE3, 0x85, 0x92, 0xF0, 0xC4, 0x32, 
		0x49, 0x24, 0x95, 0x5D, 0x98, 0x24, 0xD8, 0xB3, 0xB5, 0x82, 0xEF, 0xD3, 0xC7, 0xD6, 0xD8, 0x3B, 
		0x26, 0xCC, 0xAB, 0xEA, 0xA9, 0x24, 0xA8, 0xAF, 0x9B, 0xB5, 0x8D, 0xA3, 0x0C, 0x2E, 0x75, 0x69, 
		0x37, 0xB8, 0xB7, 0x81, 0xD8, 0xFB, 0x0C, 0x4E, 0xB6, 0x69, 0x5E, 0xAA, 0x38, 0xA9, 0xE3, 0x49, 
		0xE0, 0x95, 0x58, 0x80, 0xCC, 0x52, 0xF6, 0xE7, 0x63, 0xFA, 0xFD, 0x71, 0x93, 0x6F, 0x7C, 0x14, 
		0xB1, 0xAF, 0x22, 0x96, 0xA7, 0xC8, 0x32, 0x28, 0x83, 0xB0, 0x33, 0xBF, 0x31, 0x65, 0xE7, 0xFE, 
		0x7A, 0xE1, 0x75, 0x77, 0x1D, 0x84, 0x8C, 0xA5, 0x14, 0x11, 0xC4, 0xBC, 0xBE, 0xED, 0xCF, 0xE9, 
		0x86, 0x15, 0x99, 0x7E, 0x5B, 0x54, 0x9A, 0x6A, 0x52, 0xA6, 0x8F, 0xEB, 0xA8, 0xB2, 0x0F, 0x23, 
		0xB8, 0x3F, 0x18, 0x4B, 0x55, 0xC0, 0xD3, 0x32, 0x19, 0x28, 0x2A, 0x16, 0xA5, 0x0B, 0x01, 0x65, 
		0x17, 0x23, 0x9F, 0x87, 0x97, 0xCE, 0x2E, 0x78, 0xBF, 0xA2, 0x6A, 0x69, 0x7C, 0x8F, 0x73, 0x0A, 
		0x08, 0x61, 0x48, 0xBB, 0x22, 0xC2, 0x5D, 0x40, 0x08, 0xD9, 0xB5, 0xB3, 0xF9, 0x5C, 0x11, 0xF9, 
		0x60, 0x98, 0x6A, 0x43, 0x76, 0xC1, 0xE1, 0x48, 0xE3, 0x86, 0xC3, 0x40, 0x6B, 0x96, 0xF6, 0xDB, 
		0x90, 0xE9, 0xE2, 0x30, 0x1D, 0x55, 0x14, 0xF4, 0xD5, 0x45, 0xA9, 0xEF, 0xA6, 0x53, 0xD9, 0xA3, 
		0xC9, 0xBB, 0x12, 0x7E, 0xB8, 0xB6, 0xA7, 0x2D, 0x85, 0x0C, 0x2B, 0x03, 0x15, 0x76, 0x65, 0x89, 
		0x8B, 0x13, 0xDE, 0x2D, 0xD7, 0xCF, 0x7B, 0xFA, 0x62, 0x80, 0x13, 0x37, 0xAE, 0x14, 0x59, 0x5D, 
		0x3A, 0xBD, 0x8C, 0x93, 0xB9, 0x99, 0xC1, 0xFA, 0xF2, 0xF8, 0x00, 0xFA, 0xE1, 0xA5, 0x42, 0xC7, 
		0x9C, 0xF0, 0xAB, 0x98, 0xC0, 0x6E, 0xCC, 0xBA, 0xAD, 0xF7, 0xFB, 0xA4, 0xDB, 0x7F, 0x22, 0x3D, 
		0xB1, 0x8E, 0xE3, 0x3A, 0x92, 0xF9, 0xA9, 0x45, 0xD9, 0x50, 0xD9, 0x47, 0x80, 0x1B, 0x01, 0xEC, 
		0x30, 0xF3, 0xF6, 0x7F, 0x98, 0x09, 0xA9, 0x6A, 0x28, 0x64, 0x22, 0xF6, 0xBA, 0x83, 0xD6, 0xDF, 
		0xD8, 0x9C, 0x4D, 0x4F, 0xAF, 0x24, 0x13, 0x5E, 0xD8, 0x60, 0x5C, 0x30, 0x98, 0x8B, 0x59, 0xAF, 
		0x6C, 0x74, 0xBC, 0x9A, 0xA5, 0xAA, 0x32, 0x18, 0x66, 0x70, 0x4C, 0xB4, 0x6C, 0x0C, 0x8B, 0xD4, 
		0xA1, 0xE6, 0x3C, 0xAC, 0x5F, 0xDC, 0x61, 0x54, 0xFC, 0x15, 0x53, 0x2D, 0x63, 0xCA, 0x90, 0xC8, 
		0x55, 0x9C, 0xB0, 0x1A, 0x0D, 0x8E, 0x34, 0x59, 0x3E, 0x52, 0xF0, 0x33, 0x46, 0xD1, 0x49, 0x0A, 
		0x98, 0x44, 0x64, 0x15, 0x36, 0x6B, 0x5B, 0xC7, 0xD4, 0xE1, 0xDD, 0xA6, 0x85, 0xFC, 0xE5, 0xA6, 
		0x11, 0x1C, 0x2A, 0x6B, 0xA7, 0x81, 0xD4, 0xBC, 0x6D, 0x0A, 0x4A, 0x76, 0xFB, 0xF6, 0x60, 0x01, 
		0xFA, 0xDC, 0x31, 0xC2, 0xCE, 0x26, 0x8D, 0xE5, 0x84, 0xD3, 0xC5, 0x18, 0x6B, 0xA8, 0x54, 0x1F, 
		0xED, 0x03, 0x91, 0xFA, 0xF5, 0x1E, 0x98, 0x75, 0x2C, 0x54, 0xD4, 0x35, 0x4F, 0x57, 0xA8, 0xC7, 
		0x03, 0xC5, 0xD9, 0xBC, 0x26, 0xE4, 0x44, 0x75, 0x29, 0xB2, 0x9E, 0xAA, 0x40, 0x36, 0xEA, 0x2C, 
		0x46, 0x05, 0x5C, 0xCE, 0xBE, 0x48, 0x9E, 0xA2, 0x8E, 0x1A, 0x63, 0x0B, 0xB0, 0x54, 0x49, 0x62, 
		0x0E, 0xD6, 0x1D, 0x7E, 0x83, 0x19, 0xE7, 0x9D, 0x2D, 0xBF, 0x00, 0xDC, 0x2E, 0x92, 0xB5, 0x24, 
		0xB0, 0x4A, 0x00, 0x51, 0x18, 0x42, 0x09, 0x02, 0xFB, 0xEC, 0x47, 0x89, 0xDC, 0xFC, 0x62, 0xF9, 
		0x15, 0x4E, 0x65, 0x35, 0x88, 0xD1, 0x0C, 0x20, 0x28, 0x26, 0xDB, 0x13, 0x73, 0xF9, 0x8F, 0x5C, 
		0x17, 0x47, 0x98, 0xD7, 0xE9, 0x77, 0xAF, 0x8A, 0x99, 0x61, 0x8D, 0x6E, 0x44, 0x48, 0x03, 0x28, 
		0xEA, 0xD6, 0xE4, 0xC0, 0x75, 0x17, 0xBD, 0x8F, 0xD2, 0xE0, 0x59, 0xB2, 0xC8, 0xEB, 0x73, 0x59, 
		0x65, 0x32, 0x29, 0xA3, 0x55, 0x4D, 0xA3, 0x7B, 0xEB, 0xDB, 0x61, 0x7F, 0x0F, 0xF3, 0x9E, 0x0E, 
		0x9E, 0xB0, 0xFC, 0xC3, 0x3B, 0xC4, 0x55, 0x0D, 0x4D, 0x90, 0xC7, 0x17, 0xFE, 0x5A, 0x92, 0x66, 
		0x7F, 0xFF, 0x00, 0x5C, 0xBE, 0x05, 0xFD, 0x71, 0x86, 0x8D, 0x1A, 0x49, 0x91, 0x14, 0x1D, 0x45, 
		0xAD, 0x8E, 0xA1, 0x9D, 0xE4, 0x92, 0xD6, 0xC9, 0x20, 0x48, 0x25, 0x61, 0xA4, 0x2A, 0x30, 0x53, 
		0xA4, 0x58, 0x01, 0xFD, 0xB0, 0x9F, 0x2F, 0xE0, 0xA9, 0xA1, 0xCC, 0x22, 0x79, 0x91, 0xC2, 0x83, 
		0x7B, 0xB2, 0x10, 0x07, 0xC6, 0x35, 0x8B, 0x49, 0x19, 0xDC, 0x36, 0xC6, 0xE4, 0xC3, 0x92, 0x70, 
		0xED, 0x24, 0x12, 0x1D, 0x22, 0x42, 0x1A, 0x43, 0xD6, 0xC6, 0xDF, 0x95, 0x8F, 0xAE, 0x2B, 0xCB, 
		0x2B, 0x7E, 0xD5, 0x93, 0x2D, 0x4F, 0x33, 0x49, 0x39, 0x24, 0x0E, 0xA8, 0x49, 0xB8, 0xF6, 0xD5, 
		0xEF, 0x84, 0xDF, 0xB4, 0x0C, 0xC7, 0xB4, 0xAC, 0x4A, 0x78, 0xB6, 0x55, 0xE4, 0x3C, 0x07, 0x41, 
		0xE9, 0xCB, 0xD3, 0x15, 0x70, 0x1D, 0x4B, 0xC8, 0x6B, 0x29, 0x9B, 0x78, 0xDA, 0x32, 0xCD, 0x7F, 
		0xA0, 0xBF, 0xF4, 0xE1, 0x29, 0xF5, 0xE4, 0x35, 0x5E, 0xD8, 0x69, 0xE7, 0x95, 0xE9, 0xAA, 0xE1, 
		0x8E, 0x38, 0x63, 0x9D, 0x5C, 0x94, 0xB2, 0xB6, 0x93, 0x70, 0x3F, 0x3E, 0x7B, 0xE2, 0x98, 0xB2, 
		0x45, 0x89, 0xA4, 0xFB, 0x5F, 0x6C, 0x93, 0x06, 0x29, 0x24, 0x63, 0xB9, 0xD9, 0xB0, 0xDE, 0xC6, 
		0xDE, 0x23, 0x91, 0xE4, 0x71, 0x0A, 0x2A, 0x48, 0x74, 0x45, 0x3C, 0x8A, 0xF2, 0x48, 0x59, 0xB4, 
		0x59, 0x8A, 0xB6, 0x9F, 0xBA, 0x0E, 0xD7, 0xB1, 0xB8, 0x27, 0xAF, 0xA8, 0xC5, 0xB0, 0x44, 0xF5, 
		0xB3, 0x35, 0x4E, 0x69, 0xAA, 0x66, 0x55, 0xEC, 0xD7, 0x4B, 0x95, 0x68, 0xF4, 0x9B, 0x5B, 0xF4, 
		0xE9, 0x83, 0xA2, 0xBB, 0x3F, 0xFF, 0xD9
	};

	hr |= D3DXCreateTextureFromFileInMemory(pdevice, data,  sizeof(data),  ppOut );


	return hr;
}


//=========================================================================
//* временная  - создание вспомогательной сети (для отладки)
static HRESULT __CPPI_CreateInternalMesh(ID3DXMesh** ppOut,  IDirect3DDevice9* pdevice)
{
	HRESULT hr =0;

	void* pdata = NULL;
	int ndatalen = 0;


#pragma region DECL_INTERNAL_MESHDATA

	static const int NDATALEN = 3925;
	ndatalen = NDATALEN;
	static  signed char meshdata [NDATALEN] = {
		120, 111, 102, 32, 48, 51, 48, 51,
		116, 120, 116, 32, 48, 48, 51, 50,
		13, 10, 13, 10, 77, 101, 115, 104,
		32, 32, 123, 13, 10, 32, 51, 54,
		59, 13, 10, 32, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 45, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 45, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 45, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 45, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 32, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 32, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 32, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 32, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 45, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 32,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 45, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 45, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 45, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 32, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 45, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 45, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 45, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 45, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 45, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 45, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 45, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 32, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 48, 46, 53, 48,
		48, 48, 48, 48, 59, 45, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 32, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 45, 48, 46,
		53, 48, 48, 48, 48, 48, 59, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		32, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		32, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 45, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 32, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 45, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 45, 48, 46, 53,
		48, 48, 48, 48, 48, 59, 32, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 45, 48,
		46, 53, 48, 48, 48, 48, 48, 59,
		45, 48, 46, 53, 48, 48, 48, 48,
		48, 59, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 45,
		48, 46, 53, 48, 48, 48, 48, 48,
		59, 32, 48, 46, 53, 48, 48, 48,
		48, 48, 59, 48, 46, 53, 48, 48,
		48, 48, 48, 59, 59, 13, 10, 32,
		49, 50, 59, 13, 10, 32, 51, 59,
		48, 44, 49, 44, 50, 59, 44, 13,
		10, 32, 51, 59, 51, 44, 52, 44,
		53, 59, 44, 13, 10, 32, 51, 59,
		54, 44, 55, 44, 56, 59, 44, 13,
		10, 32, 51, 59, 57, 44, 49, 48,
		44, 49, 49, 59, 44, 13, 10, 32,
		51, 59, 49, 50, 44, 49, 51, 44,
		49, 52, 59, 44, 13, 10, 32, 51,
		59, 49, 53, 44, 49, 54, 44, 49,
		55, 59, 44, 13, 10, 32, 51, 59,
		49, 56, 44, 49, 57, 44, 50, 48,
		59, 44, 13, 10, 32, 51, 59, 50,
		49, 44, 50, 50, 44, 50, 51, 59,
		44, 13, 10, 32, 51, 59, 50, 52,
		44, 50, 53, 44, 50, 54, 59, 44,
		13, 10, 32, 51, 59, 50, 55, 44,
		50, 56, 44, 50, 57, 59, 44, 13,
		10, 32, 51, 59, 51, 48, 44, 51,
		49, 44, 51, 50, 59, 44, 13, 10,
		32, 51, 59, 51, 51, 44, 51, 52,
		44, 51, 53, 59, 59, 13, 10, 13,
		10, 32, 77, 101, 115, 104, 78, 111,
		114, 109, 97, 108, 115, 32, 32, 123,
		13, 10, 32, 32, 51, 54, 59, 13,
		10, 32, 32, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 45, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 45, 49, 46,
		48, 48, 48, 48, 48, 48, 59, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 45, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 32, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 45,
		49, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		45, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 32,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 45, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 45, 49, 46, 48, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 32, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 45, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 45, 49, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 45, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 45,
		49, 46, 48, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 32, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		45, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 45,
		49, 46, 48, 48, 48, 48, 48, 48,
		59, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 32,
		45, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 45, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 32, 45, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 45, 49, 46, 48, 48,
		48, 48, 48, 48, 59, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 45, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		59, 13, 10, 32, 32, 49, 50, 59,
		13, 10, 32, 32, 51, 59, 48, 44,
		49, 44, 50, 59, 44, 13, 10, 32,
		32, 51, 59, 51, 44, 52, 44, 53,
		59, 44, 13, 10, 32, 32, 51, 59,
		54, 44, 55, 44, 56, 59, 44, 13,
		10, 32, 32, 51, 59, 57, 44, 49,
		48, 44, 49, 49, 59, 44, 13, 10,
		32, 32, 51, 59, 49, 50, 44, 49,
		51, 44, 49, 52, 59, 44, 13, 10,
		32, 32, 51, 59, 49, 53, 44, 49,
		54, 44, 49, 55, 59, 44, 13, 10,
		32, 32, 51, 59, 49, 56, 44, 49,
		57, 44, 50, 48, 59, 44, 13, 10,
		32, 32, 51, 59, 50, 49, 44, 50,
		50, 44, 50, 51, 59, 44, 13, 10,
		32, 32, 51, 59, 50, 52, 44, 50,
		53, 44, 50, 54, 59, 44, 13, 10,
		32, 32, 51, 59, 50, 55, 44, 50,
		56, 44, 50, 57, 59, 44, 13, 10,
		32, 32, 51, 59, 51, 48, 44, 51,
		49, 44, 51, 50, 59, 44, 13, 10,
		32, 32, 51, 59, 51, 51, 44, 51,
		52, 44, 51, 53, 59, 59, 13, 10,
		32, 125, 13, 10, 13, 10, 32, 77,
		101, 115, 104, 77, 97, 116, 101, 114,
		105, 97, 108, 76, 105, 115, 116, 32,
		32, 123, 13, 10, 32, 32, 49, 59,
		13, 10, 32, 32, 49, 50, 59, 13,
		10, 32, 32, 48, 44, 13, 10, 32,
		32, 48, 44, 13, 10, 32, 32, 48,
		44, 13, 10, 32, 32, 48, 44, 13,
		10, 32, 32, 48, 44, 13, 10, 32,
		32, 48, 44, 13, 10, 32, 32, 48,
		44, 13, 10, 32, 32, 48, 44, 13,
		10, 32, 32, 48, 44, 13, 10, 32,
		32, 48, 44, 13, 10, 32, 32, 48,
		44, 13, 10, 32, 32, 48, 59, 13,
		10, 13, 10, 32, 32, 77, 97, 116,
		101, 114, 105, 97, 108, 32, 80, 68,
		88, 49, 51, 95, 45, 95, 68, 101,
		102, 97, 117, 108, 116, 32, 123, 13,
		10, 32, 32, 32, 48, 46, 53, 56,
		56, 50, 51, 53, 59, 48, 46, 53,
		56, 56, 50, 51, 53, 59, 48, 46,
		53, 56, 56, 50, 51, 53, 59, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		59, 13, 10, 32, 32, 32, 51, 46,
		50, 48, 48, 48, 48, 48, 59, 13,
		10, 32, 32, 32, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 59,
		13, 10, 32, 32, 32, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		59, 13, 10, 32, 32, 125, 13, 10,
		32, 125, 13, 10, 13, 10, 32, 77,
		101, 115, 104, 84, 101, 120, 116, 117,
		114, 101, 67, 111, 111, 114, 100, 115,
		32, 32, 123, 13, 10, 32, 32, 51,
		54, 59, 13, 10, 32, 32, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 49, 46, 48, 48,
		48, 48, 48, 48, 59, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 32, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 32,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 32, 49, 46,
		48, 48, 48, 48, 48, 48, 59, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 32, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 32,
		49, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 32, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 48, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 32, 49, 46, 48, 48, 48, 48,
		48, 48, 59, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 32,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 48,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 32, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 49, 46, 48, 48,
		48, 48, 48, 48, 59, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 44, 13, 10,
		32, 32, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 49, 46, 48, 48, 48,
		48, 48, 48, 59, 44, 13, 10, 32,
		32, 48, 46, 48, 48, 48, 48, 48,
		48, 59, 48, 46, 48, 48, 48, 48,
		48, 48, 59, 44, 13, 10, 32, 32,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 49, 46, 48, 48, 48, 48, 48,
		48, 59, 44, 13, 10, 32, 32, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		48, 46, 48, 48, 48, 48, 48, 48,
		59, 44, 13, 10, 32, 32, 49, 46,
		48, 48, 48, 48, 48, 48, 59, 49,
		46, 48, 48, 48, 48, 48, 48, 59,
		44, 13, 10, 32, 32, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 48, 46,
		48, 48, 48, 48, 48, 48, 59, 44,
		13, 10, 32, 32, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 49, 46, 48,
		48, 48, 48, 48, 48, 59, 44, 13,
		10, 32, 32, 48, 46, 48, 48, 48,
		48, 48, 48, 59, 48, 46, 48, 48,
		48, 48, 48, 48, 59, 59, 13, 10,
		32, 125, 13, 10, 125 };

#pragma endregion DECL_INTERNAL_MESHDATA

		pdata = (void*)meshdata;


		hr =  D3DXLoadMeshFromXInMemory(
			pdata, ndatalen, D3DXMESH_SYSTEMMEM  , pdevice, NULL, NULL, NULL, NULL, ppOut);


		return hr;
}

#endif





//=========================================================================
ApplD3D9::ApplD3D9() 
{
	PRINT_D9R_FUNC

	m_pd3d = NULL;
	m_pd3dDevice  = NULL;

	memset(&m_d3dpp,  0 , sizeof(m_d3dpp)  ); 
	memset(&m_bbsd,  0 , sizeof(m_bbsd)  );  
	memset(&m_caps,  0 , sizeof(m_caps)  );
 


#ifdef ENABLE_USING_D3DXFONT
	m_pFont = NULL;
#endif
 
};

//=========================================================================
ApplD3D9::~ApplD3D9() 
{
	PRINT_D9R_FUNC


};

//=========================================================================
HRESULT ApplD3D9::init(const APPL_D3D9_INIT_DATA* pInitData)   
{
	PRINT_D9R_FUNC

		HRESULT hr =0;
	if(pInitData)
	{
		m_initdata = *pInitData;
	}

	if(m_initdata.bWindowed == FALSE)
	{
		MessageBoxA(NULL, "Полноэкранный режим пока отключён", "ApplD3D9", 
			MB_OK | MB_ICONINFORMATION | MB_TASKMODAL | MB_TOPMOST );
		m_initdata.bWindowed = TRUE;
	}

	hr |= createRenderingWindow(&m_initdata);
	Sleep(10);
	hr |= initD3D();
	Sleep(10);


	return hr;
};

//=========================================================================
HRESULT ApplD3D9::run()   
{
	PRINT_D9R_FUNC
		HRESULT  hr =0;

	if( (!m_hwnd) || (!m_pd3dDevice)  ) return E_FAIL;



	// Show the window
	ShowWindow(  m_hwnd, SW_SHOWDEFAULT );
	UpdateWindow(  m_hwnd );

	// Enter the message loop
	MSG msg; 
	ZeroMemory( &msg, sizeof(msg) );



	while( msg.message!=WM_QUIT )
	{
		if( PeekMessage( &msg, NULL, 0U, 0U, PM_REMOVE ) )
		{
			TranslateMessage( &msg );
			DispatchMessage( &msg );
		}
		else
			doRenderind();
	} 


    //Sleep(10);

	hr |= destroyDevice();

	Sleep(10);
	return hr;
};

//================================================================
HRESULT ApplD3D9::destroyDevice()   
{
	PRINT_D9R_FUNC
		HRESULT hr =0;
	m_CaptureTimer.stop();

	//	hr |= m_DeviceCallBack.OnDestroyDevice();
	//	hr |= m_DeviceCriticalEventCallBack.Call();


	ReleaseSampleDataScene();


#ifdef ENABLE_USING_D3DXFONT
	if(m_pFont) 
	{
		m_pFont->Release();
		m_pFont = NULL ;
	}
#endif

	if( m_pd3dDevice  )
	{
		m_pd3dDevice->Release();
		m_pd3dDevice = NULL;
	}

	if( m_pd3d   )
	{
		m_pd3d->Release();
		m_pd3d = NULL;
	}




	Sleep(10);

	return hr;
};


//======================================================
HRESULT ApplD3D9::initD3D()   
{
	PRINT_D9R_FUNC
		HRESULT hr =0;

	// Create the D3D object.
	if( NULL == ( m_pd3d = Direct3DCreate9( D3D_SDK_VERSION ) ) )
	{
	   printf("Failed create Direct3D \n");
		return E_FAIL;
	}


	// Set up the structure used to create the D3DDevice. Since we are now
	// using more complex geometry, we will create a device with a zbuffer.

	ZeroMemory( &m_d3dpp, sizeof(m_d3dpp) ); 

	if(m_initdata.bWindowed == FALSE)
	{
		printf("Full screen mode not supperted \n");
	
	 return E_FAIL;
	}

	if(m_initdata.bWindowed)
	{
		m_d3dpp.Windowed =   TRUE;
	}
	else
	{
		m_d3dpp.Windowed =   FALSE;
	};




	// old>> D3DSWAPEFFECT_DISCARD;
	m_d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;


	m_d3dpp.BackBufferFormat =  D3DFMT_UNKNOWN ;  // old >>  ; D3DFMT_X8R8G8B8
	m_d3dpp.EnableAutoDepthStencil = TRUE;
	m_d3dpp.AutoDepthStencilFormat = D3DFMT_D16;

	// set present interval
	if(m_initdata.bVSyncOn)
	{
		m_d3dpp.PresentationInterval = D3DPRESENT_INTERVAL_DEFAULT; 
	}
	else
	{
		m_d3dpp.PresentationInterval =  D3DPRESENT_INTERVAL_IMMEDIATE; 
	};



	//   m_d3dpp.BackBufferWidth = 0;
	//  m_d3dpp.BackBufferHeight = 0;
	//  m_d3dpp.BackBufferFormat = D3DFMT_UNKNOWN;
	//  m_d3dpp.BackBufferCount = 0;

	//  m_d3dpp.MultiSampleType = D3DMULTISAMPLE_NONE;
	//  m_d3dpp.MultiSampleQuality = 0;

	//  m_d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;

	// m_d3dpp.hDeviceWindow =   m_hwnd; // 0;

	//  m_d3dpp.Windowed  =TRUE;
	//  m_d3dpp.EnableAutoDepthStencil =  TRUE;
	//  m_d3dpp.AutoDepthStencilFormat = D3DFMT_D16;
	//  m_d3dpp.Flags = 0;


	// m_d3dpp.FullScreen_RefreshRateInHz = 0;



	// Create the D3DDevice
	hr |= m_pd3d->CreateDevice( 
		D3DADAPTER_DEFAULT, 
		D3DDEVTYPE_HAL, 
		m_hwnd,
		//D3DCREATE_HARDWARE_VERTEXPROCESSING,
		D3DCREATE_SOFTWARE_VERTEXPROCESSING,
		&m_d3dpp, 
		&m_pd3dDevice ); 

	if FAILED(hr)
	{
		printf("Failed create device \n");
		return  hr;
	}

	// get caps
	hr |= m_pd3dDevice->GetDeviceCaps(&m_caps);
	if FAILED(hr)
	{
		printf("Failed get device caps \n");
		return hr;
	}

	// get backbuf descr
	IDirect3DSurface9* pSrfBackBuf = NULL;
	hr |= m_pd3dDevice->GetBackBuffer(0 , 0, D3DBACKBUFFER_TYPE_MONO, &pSrfBackBuf );
	if FAILED(hr)
	{
		printf("Error get  device back buffer \n");
		return hr;
	}

	hr |= pSrfBackBuf->GetDesc(&m_bbsd);


	if(pSrfBackBuf)
	{
		pSrfBackBuf->Release();
		pSrfBackBuf = NULL;
	}

	// init window info
	if(! ::GetWindowInfo(m_hwnd , &m_windowinfo ) )
	{
		printf("Error get window info \n");

		hr |= E_FAIL;  
	}


	// perf str
	hr |= this->MakeMonDrawText(m_perfMonData.str, m_pd3d, &m_bbsd );

#pragma message("KS777: перенести: m_CaptureTimer.start(m_hwnd, 1000 );"  __FILE__)
	m_CaptureTimer.start(m_hwnd, 1000 );

	// do callback
	//   hr |=  m_DeviceCallBack.OnCreateDevice(m_pd3dDevice , &m_bbsd );
	//  hr |=  m_DeviceCriticalEventCallBack.Call();

#pragma message("KS777: need reset device .... xxx ??" __FILE__ ) 
	// need reset device .... xxx ??????????????


	return   hr;
}

//=========================================================================
HRESULT ApplD3D9::createRenderingWindow(const APPL_D3D9_INIT_DATA* intiData)  
{
	PRINT_D9R_FUNC
		HRESULT hr =0;

	// intiData
	// Register the window class

	m_windowclass.cbSize = 		sizeof(WNDCLASSEXW);
	m_windowclass.style   = 		CS_CLASSDC;
	m_windowclass.lpfnWndProc	=	mainWindowProc ; 
	m_windowclass.cbClsExtra		= 0;
	m_windowclass.cbWndExtra		= 0; 

	m_windowclass.hInstance		= intiData->hInstance ; // hinstance;
	m_windowclass.hIcon			= LoadIcon(NULL, IDI_APPLICATION);
	m_windowclass.hCursor		= LoadCursor(NULL, IDC_ARROW);

	m_windowclass.hbrBackground	= NULL ; // (HBRUSH)GetStockObject(GRAY_BRUSH);
	m_windowclass.lpszMenuName	= NULL;
	m_windowclass.lpszClassName	= CWSTR_WINDOW_CLASSNAME ; // "D3D Tutorial";
	m_windowclass.hIconSm        = LoadIcon(NULL, IDI_APPLICATION);



	RegisterClassExW( &m_windowclass );

	void* param = (void*)this;

	// Create the application's window
	//

	const WCHAR* pStrTitle = NULL;
	if(intiData->strWindowTitle[0] == '\0')
	{
		pStrTitle = L"D3D9 Application";
	}
	else
	{
		pStrTitle = intiData->strWindowTitle;
	};

	m_hwnd = CreateWindowW( 
		CWSTR_WINDOW_CLASSNAME, 
		pStrTitle, 
		WS_OVERLAPPEDWINDOW, 
		10, 
		10,
		intiData->nWindowWidth, 
		intiData->nWindowHeight,
		NULL, // hw parent
		NULL, //hmenu
		m_windowclass.hInstance, 
		param 
		);

	if(!m_hwnd) 
	{ 
		return E_FAIL;
	}


	return hr;
};
 
//=========================================================================
LRESULT WINAPI ApplD3D9::mainWindowProc( HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam )
{
	HRESULT hr =0;

	static ApplD3D9* pD9Render = NULL;
	LPCREATESTRUCT pcrstr = NULL;

 
	unsigned int vkey;

	int t=0;

	int width, height;

	if(pD9Render)
	{
	   BOOL bProcessAgain = TRUE;

		if( pD9Render->m_initdata.basecallback.funcOnMessage )
		{

			hr |= pD9Render->m_initdata.basecallback.funcOnMessage
			 (
			 pD9Render->m_initdata.basecallback.pUserParam,
			 hWnd,  msg,  wParam,  lParam, &bProcessAgain  
			 );

		} 
 
	if(!bProcessAgain) return 0;
	} // if



	switch( msg )
	{

	case WM_CREATE:
		pcrstr  = (LPCREATESTRUCT)lParam;
		pD9Render = (ApplD3D9*)pcrstr->lpCreateParams;
 
		break;

	case WM_CLOSE:
		t=0;
		break;

	case WM_QUIT:
		t=0;
		break;

	case WM_MOVE:
		t=0;
		break;

	case WM_ACTIVATE:
		t=0;
		break;

	case WM_SIZE: 
		assert(pD9Render);
		height = HIWORD(lParam);      
		width  = LOWORD(lParam);
		hr |= pD9Render->doHandleResizeWindow( width , height );

		break;

	case WM_ENABLE:
		t=0;
		break;


	case WM_DESTROY:
		assert(pD9Render);
		pD9Render->m_bShutDownFlag= TRUE;
		hr |= pD9Render->destroyDevice();
		Sleep(10);
		PostQuitMessage( 0 );
		return 0;


	case WM_HOTKEY:
		t=0;
		break;


	case WM_KEYDOWN:
		assert(pD9Render);
		vkey = (unsigned int)wParam;
		hr |= pD9Render->keybMsgProc(vkey, true );
		if(pD9Render->m_bShutDownFlag)
		{
			Sleep(10);
			PostQuitMessage( 0 ); 
		}

		break;

	case WM_KEYUP:
		assert(pD9Render);
		vkey = (unsigned int)wParam;
		hr |= pD9Render->keybMsgProc(vkey, false );

		break;

	case WM_CHAR:
		t=0;
		break;



		//  case WM_KEYFIRST: 
		//		t=0;
		//	  break;

	case WM_KEYLAST: 
		t=0;
		break;

	case WM_SYSKEYDOWN :
		t=0;
		break;

	case WM_SYSKEYUP : 
		t=0;
		break;

#pragma message("KS777: need insert handle mouse messages " __FILE__)




	default:
		{
			t=0;
		}


	}// switch

	return DefWindowProc( hWnd, msg, wParam, lParam );
};

//=========================================================================
HRESULT ApplD3D9::doHandleResizeWindow(int nNewWidth, int nNewHeight)
{
  HRESULT hr =0;

   hr |=  reset( nNewWidth , nNewHeight );

   // handle callback
		   
   if( m_initdata.basecallback.funcOnResize )
   {
	 hr |= m_initdata.basecallback.funcOnResize(m_initdata.basecallback.pUserParam, nNewWidth, nNewHeight );
   }


   return hr;
};


//=========================================================================
HRESULT ApplD3D9::reset(int w, int h)  
{
	HRESULT hr =0;
	PRINT_D9R_FUNC

		m_d3dpp.BackBufferWidth = (UINT)w;
	m_d3dpp.BackBufferHeight = (UINT)h;


#ifdef ENABLE_USING_D3DXFONT
	if(m_pFont)
	{
		m_pFont->Release();
		m_pFont = NULL;
	}
#endif




	if(m_pd3dDevice)
	{
		hr |= m_pd3dDevice->Reset(&m_d3dpp);
	}

	if FAILED(hr)
	{
		printf("Failed reset device \n");
		return hr;
	}

	IDirect3DSurface9* pBackBuffer = NULL;
	hr |= m_pd3dDevice->GetBackBuffer(
		0, //UINT iSwapChain,
		0 , //UINT iBackBuffer,
		D3DBACKBUFFER_TYPE_MONO, //D3DBACKBUFFER_TYPE Type,
		&pBackBuffer);


	if SUCCEEDED(hr)
	{
		hr |= pBackBuffer->GetDesc(&m_bbsd);
	}
	else
	{
		printf("Failed get beck buffer \n");
		int _stop =0;
	}


	if(pBackBuffer) 
	{
		pBackBuffer->Release();
		pBackBuffer = NULL;
	}

	Sleep(10);
	//   hr |=  m_DeviceCallBack.OnResetDevice(m_pd3dDevice , &m_bbsd );
	//  hr |=  m_DeviceCriticalEventCallBack.Call();



 
	return hr;
}

//=========================================================================
HRESULT ApplD3D9::SetupMatrices(const ApplD3D9* pRender) const
{
	HRESULT hr =0;
	if(!m_pd3dDevice) return E_FAIL;

	// Set up world matrix
	D3DXMATRIXA16 matWorld;




	D3DXMatrixRotationY( &matWorld, m_timeData.m_fCurrentTime/1000.0f );
	hr |=  m_pd3dDevice->SetTransform( D3DTS_WORLD, &matWorld );

	// Set up our view matrix. A view matrix can be defined given an eye point,
	// a point to lookat, and a direction for which way is up. Here, we set the
	// eye five units back along the z-axis and up three units, look at the 
	// origin, and define "up" to be in the y-direction.
	D3DXVECTOR3 vEyePt( 0.0f, 2.0f,-6.0f );
	D3DXVECTOR3 vLookatPt( 0.0f, 0.0f, 0.0f );
	D3DXVECTOR3 vUpVec( 0.0f, 1.0f, 0.0f );

	D3DXMATRIXA16 matView;
	D3DXMatrixLookAtLH( &matView, &vEyePt, &vLookatPt, &vUpVec );
	hr |=  m_pd3dDevice->SetTransform( D3DTS_VIEW, &matView );

	// For the projection matrix, we set up a perspective transform (which
	// transforms geometry from 3D view space to 2D viewport space, with
	// a perspective divide making objects smaller in the distance). To build
	// a perpsective transform, we need the field of view (1/4 pi is common),
	// the aspect ratio, and the near and far clipping planes (which define at
	// what distances geometry should be no longer be rendered).

	float asp = 1.0f;


	if( (pRender->m_bbsd.Width==0)||(pRender->m_bbsd.Height==0) )
	{
		asp = 1.0f;
	}
	else
	{
		asp = ( (float)pRender->m_bbsd.Width) / ( (float)pRender->m_bbsd.Height);
	}

	D3DXMATRIXA16 matProj;
	D3DXMatrixPerspectiveFovLH( &matProj, D3DX_PI/4, asp, 1.0f, 100.0f );
	hr |= pRender->m_pd3dDevice->SetTransform( D3DTS_PROJECTION, &matProj );



	return hr;
}

//================================================================
HRESULT ApplD3D9::doBeginFrameDraw()
{
 HRESULT hr =0;

 hr |= gb::system::winappl::Appl3D::doBeginFrameDraw();



  return hr;
};


//================================================================
HRESULT ApplD3D9::doRenderind()  
{
	HRESULT hr =0;
	int _stop =0;

	if(m_bShutDownFlag)
	{


#ifdef ENABLE_USING_D3DXFONT
		if(m_pFont)
		{
			m_pFont->Release();
			m_pFont = NULL;
		}
#endif


		return hr;
	}



	// test coop level
	//
	{

		HRESULT hrTestCoopLev = m_pd3dDevice->TestCooperativeLevel();
		if(hrTestCoopLev<0)
		{
			printf(" >> Failed: m_pd3dDevice->TestCooperativeLevel() \n");
			switch(hrTestCoopLev)
			{
			case D3DERR_DEVICELOST: { 
				printf("     D3DERR_DEVICELOST \n");
				_stop =0;		 
									} break;

			case D3DERR_DEVICENOTRESET: { 
				printf("     D3DERR_DEVICENOTRESET \n");
				_stop =0;			 
										} break;

			case D3DERR_DRIVERINTERNALERROR: { 
				printf("     D3DERR_DRIVERINTERNALERROR \n");
				_stop =0;				  
											 } break;

			default: {
				_stop =0;
					 }

			} // switch

		} // if

	}
	//
	// end (test coop level)



	// validate device
	//
	{ 

		DWORD dwVldres = 1;
		HRESULT hrValDvc = 0; // m_pd3dDevice->ValidateDevice( &dwVldres  );
		if FAILED(hrValDvc)
		{
			printf("Failed: m_pd3dDevice->ValidateDevice()\n");

			switch( hrValDvc ) {

		 case   D3DERR_CONFLICTINGRENDERSTATE:  { 
			 printf("    D3DERR_CONFLICTINGRENDERSTATE \n");
			 _stop=0; 
												} break;

		 case  D3DERR_CONFLICTINGTEXTUREFILTER:  {  
			 printf("    D3DERR_CONFLICTINGTEXTUREFILTER \n");
			 _stop=0; 
												 } break;

		 case   D3DERR_DEVICELOST:  {  
			 printf("    D3DERR_DEVICELOST \n");
			 _stop=0; 
									} break;

		 case   D3DERR_DRIVERINTERNALERROR:  { 
			 printf("    D3DERR_DRIVERINTERNALERROR \n");
			 _stop=0; } break;

		 case  D3DERR_TOOMANYOPERATIONS:  { 
			 printf("    D3DERR_TOOMANYOPERATIONS \n");
			 _stop=0;
										  } break;

		 case  D3DERR_UNSUPPORTEDALPHAARG:  { 
			 printf("    D3DERR_UNSUPPORTEDALPHAARG \n");
			 _stop=0; 
											} break;

		 case   D3DERR_UNSUPPORTEDALPHAOPERATION:  { 
			 printf("    D3DERR_UNSUPPORTEDALPHAOPERATION \n");
			 _stop=0; 
												   } break;

		 case  D3DERR_UNSUPPORTEDCOLORARG:  { 
			 printf("    D3DERR_UNSUPPORTEDCOLORARG \n");
			 _stop=0; 
											} break;

		 case  D3DERR_UNSUPPORTEDCOLOROPERATION:  { 
			 printf("    D3DERR_UNSUPPORTEDCOLOROPERATION \n");
			 _stop=0; 
												  } break;

		 case   D3DERR_UNSUPPORTEDFACTORVALUE:  { 
			 printf("    D3DERR_UNSUPPORTEDFACTORVALUE \n");
			 _stop=0; 
												} break;

		 case   D3DERR_UNSUPPORTEDTEXTUREFILTER:  { 
			 printf("    D3DERR_UNSUPPORTEDTEXTUREFILTER \n");
			 _stop=0; 
												  } break;

		 case   D3DERR_WRONGTEXTUREFORMAT:  { 
			 printf("    D3DERR_WRONGTEXTUREFORMAT \n");
			 _stop=0; 
											} break;

		 default: {
			 _stop =0;

				  }


			} // switch




			// call lost device
#ifdef ENABLE_USING_D3DXFONT
			if(m_pFont)
			{
				m_pFont->OnLostDevice();
			}
#endif

			//	 hr |= m_DeviceCallBack.OnLostDevice();
			//	 hr |= m_DeviceCriticalEventCallBack.Call();	 
		}

	}
	//
	// end (validate device)


	hr |= doBeginFrameDraw ();


 hr |= m_pd3dDevice->Clear( 0, NULL, D3DCLEAR_TARGET|D3DCLEAR_ZBUFFER, 
	 D3DCOLOR_COLORVALUE(m_initdata.clearColor.red, 
	 m_initdata.clearColor.green, 
	 m_initdata.clearColor.blue, 0.0f ), 
 1.0f,  0 );


	if(m_initdata.bUsePrepareRenderBeforeFrameDraw)
	{
		D3DMATERIAL9 mat;
		hr |=    m_pd3dDevice->GetMaterial(&mat);
		mat.Emissive.r = mat.Emissive.g = mat.Emissive.b = mat.Emissive.a = 1.0f;
		hr |=    m_pd3dDevice->SetMaterial(&mat);

		hr |=    m_pd3dDevice->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR );
		hr |=    m_pd3dDevice->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR );
		hr |=    m_pd3dDevice->SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_LINEAR );


	}




	// Begin the scene
	if( SUCCEEDED( m_pd3dDevice->BeginScene() ) )
	{

		  SetupMatrices( this);


		// do draw on callback
		m_frameDrawTimeMonData.beginFrameDraw();
		if(m_initdata.callback_d3d9.funcOnFrameDraw)
		{
			//__try {

				hr |= m_initdata.callback_d3d9.funcOnFrameDraw(
					this, 
					m_initdata.basecallback.pUserParam  
					//m_pd3dDevice, 
					//m_timeData.m_fCurrentTime, 
					//m_timeData.m_fDeltaTime
					);


			//} __except(1) {   
			//	hr |= E_FAIL; 
			//}

		}
		else
		{
			// draw sample scene

			//hr |= DrawSampleScene(m_pd3dDevice);

		}
		m_frameDrawTimeMonData.endFrameDraw();
		// end






		// End the scene
		hr |=  m_pd3dDevice->EndScene();
	}
	else
	{
		// 
		printf("begin scene failed \n");

		hr |= E_FAIL;
	};


	// draw font
	//
	{
		hr |= m_pd3dDevice->BeginScene();


#ifdef ENABLE_USING_D3DXFONT

		if(!m_pFont)
		{
			hr |= D3DXCreateFontA( m_pd3dDevice, 14, 0, FW_BOLD, 1, FALSE, DEFAULT_CHARSET, 
				OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, 
				"Courier New", &m_pFont );
		}

		if FAILED(hr) 
		{
			
			return E_FAIL;
		}


		RECT rect;
		SetRect(&rect, 10, 10, 500, 200 );
		hr |= m_pFont->DrawTextA(NULL, m_perfMonData.str.c_str(), -1, &rect, DT_LEFT ,  0xffffffff ); 

		SetRect(&rect, 10, 70, 500, 200 );
		hr |= m_pFont->DrawTextA(NULL, m_fpsMonData.str.c_str(), -1, &rect, DT_LEFT ,  0xffffffff ); 

		SetRect(&rect, 10, 83, 500, 200 );
		hr |= m_pFont->DrawTextA(NULL, m_frameDrawTimeMonData.m_str.c_str(), -1, &rect, DT_LEFT ,  0xffffffff );



#endif


		hr |= m_pd3dDevice->EndScene();	

	}
	// end draw font



	// Present the backbuffer contents to the display
	HRESULT hrPresent = m_pd3dDevice->Present( NULL, NULL, NULL, NULL );
	if(hrPresent)
	{
      printf("Failed device persent \n");
		int _stop = 0;
	}


	// update perf info
	m_perfMonData.nFrameDrawCount++;
	m_fpsMonData.nCountFrames++;


	return hr;
};


//============================================================
HRESULT ApplD3D9::MakeMonDrawText(std::string& sOut, IDirect3D9* pd3d, const D3DSURFACE_DESC* backSurf)  
{
	HRESULT hr =0;
	sOut = "";

	D3DADAPTER_IDENTIFIER9  ai;
	hr |= pd3d->GetAdapterIdentifier(
		D3DADAPTER_DEFAULT, //UINT Adapter,
		0, //DWORD Flags,
		&ai // D3DADAPTER_IDENTIFIER9 * pIdentifier
		);

	if FAILED(hr) return hr;

	sOut += ai.Description;
	sOut += "\n";
	//sOut += ai.DeviceName;
	//sOut += "\n";

#pragma message("KS777: APPL D3D9 >> NEED INSERT FORAMT TO STR")
	// sOut +=  D3DFORMAT_to_str( backSurf->Format );



	return hr;
}

//=========================================================================
HRESULT ApplD3D9::DrawInternalSampleScene() const 
{
	return  DrawSampleScene(m_pd3dDevice);
};

IDirect3DTexture9* ApplD3D9::getSampleTexture() const  throw(std::runtime_error&) 
{
	if(!g_pTempTexture)
	{
		if FAILED( __CPPI_CreateInternalTexture(&g_pTempTexture, m_pd3dDevice ))
		{
			throw std::runtime_error("Failed create internal texture"); 
		}
	}
	return g_pTempTexture;
}

//=========================================================================
HRESULT ApplD3D9::finalize() 
{
	HRESULT hr =0;

	UnregisterClassW( CWSTR_WINDOW_CLASSNAME ,  m_windowclass.hInstance );
	return hr;
};

//=========================================================================
HRESULT ApplD3D9::shutDown(int nExitCode)
{
  //assert(false);
#pragma message("KS777: ApplD3D9::shutDown >>  NEED CORRECT " __FILE__)
  m_bShutDownFlag = TRUE;
  return 0;
};



//===============================================================
HRESULT DrawSampleScene(IDirect3DDevice9* pdevice) {

	HRESULT hr =0;

#ifdef  ENABLE_SAMPLE_SCENE

	D3DMATERIAL9 mat;
	hr |= pdevice->GetMaterial(&mat);
	mat.Emissive.r=mat.Emissive.g=mat.Emissive.b=mat.Emissive.a = 1.0f;
	mat.Diffuse.r=mat.Diffuse.g=mat.Diffuse.b=mat.Diffuse.a = 1.0f;
	hr |= pdevice->SetMaterial(&mat);


	// new code
	if(!g_pTempMesh)
	{
		hr |=  __CPPI_CreateInternalMesh(&g_pTempMesh, pdevice);

	}

	if FAILED(hr) return hr;

	if(!g_pTempTexture)
	{
		hr |= __CPPI_CreateInternalTexture(&g_pTempTexture, pdevice );
	}

	if FAILED(hr) return hr;


	// Turn on the z buffer
	//hr |= m_pdevice->SetRenderState( D3DRS_ZENABLE, TRUE );
	// Turn on ambient lighting 
	//hr |= m_pdevice->SetRenderState( D3DRS_AMBIENT, 0xffffffff );
	//	hr |= m_pdevice->SetRenderState( );


	hr |= pdevice->SetTexture(0, g_pTempTexture );
	hr |= g_pTempMesh->DrawSubset(0);

#endif

	return hr;
};

//===================================================================
void ReleaseSampleDataScene() {
	PRINT_D9R_FUNC

#ifdef  ENABLE_SAMPLE_SCENE

		if(g_pTempMesh)
		{
			g_pTempMesh->Release();
			g_pTempMesh = NULL;
		}

		if(g_pTempTexture)
		{
			g_pTempTexture->Release();
			g_pTempTexture = NULL;
		}

#endif

}; 


//=========================================================================
	

}  // end ns		 
}  // end ns
}  // end ns
}  // end ns

#endif
// end file